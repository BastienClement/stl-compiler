/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var stlc = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_units":4,"EOF":5,"program_unit":6,"external_declaration":7,"struct_declaration":8,"global_variable_declaration":9,"global_array_declaration":10,"function_declaration":11,"block_declaration":12,"BLOCK":13,"EXTERNAL_MEMORY_POINTER":14,"RANGE_OPERATOR":15,";":16,"IDENTIFIER":17,"normalized_identifier":18,"EXTERNAL_POINTER":19,"[":20,"constant_integer":21,"]":22,"variable_declaration":23,"=":24,"constant_expression":25,"array_declaration":26,"function_definition":27,"{":28,"function_body":29,"}":30,"STRUCT":31,"struct_definition":32,"struct_member_definition":33,"type":34,"function_definition_inner":35,"(":36,"arguments_definition":37,")":38,"argument":39,",":40,"local_declaration_list":41,"statements_list":42,"local_variable_declaration":43,"STATIC":44,"local_array_declaration":45,"statement":46,"block_statement":47,"expression_statement":48,"if_statement":49,"switch_statement":50,"loop_statement":51,"control_statement":52,"LIST_CODE":53,"LIST_COMMENT":54,":":55,"GOTO":56,"expression":57,"assignment_expression":58,"assign_operation_expression":59,"sub_expression":60,"cast_expression":61,"reference_expression":62,"binary_operation_expression":63,"logical_operation_expression":64,"shift_operation_expression":65,"unary_operation_expression":66,"increment_operation_expression":67,"call_expression":68,"LIST_EXPRESSION":69,"IF":70,"ELSE":71,"while_statement":72,"for_statement":73,"WHILE":74,"DO":75,"FOR":76,"SWITCH":77,"cases_list":78,"case_unit":79,"CASE":80,"DEFAULT":81,"BREAK":82,"CONTINUE":83,"RETURN":84,"<":85,">":86,"+":87,"-":88,"*":89,"/":90,"%":91,"&":92,"|":93,"^":94,"<=":95,">=":96,"==":97,"!=":98,"<<":99,">>":100,"<<<":101,">>>":102,"&&":103,"||":104,"^^":105,"RISING":106,"FALLING":107,"!":108,"++":109,"--":110,"+=":111,"-=":112,"*=":113,"/=":114,"%=":115,"<<=":116,">>=":117,"&=":118,"|=":119,"^=":120,"call_argument_list":121,"DEC_CONSTANT":122,"HEX_CONSTANT":123,"BIN_CONSTANT":124,"REAL_CONSTANT":125,"boolean_literal":126,"STRING_CONSTANT":127,"TRUE":128,"FALSE":129,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"BLOCK",14:"EXTERNAL_MEMORY_POINTER",15:"RANGE_OPERATOR",16:";",17:"IDENTIFIER",19:"EXTERNAL_POINTER",20:"[",22:"]",24:"=",28:"{",30:"}",31:"STRUCT",36:"(",38:")",40:",",44:"STATIC",53:"LIST_CODE",54:"LIST_COMMENT",55:":",56:"GOTO",69:"LIST_EXPRESSION",70:"IF",71:"ELSE",74:"WHILE",75:"DO",76:"FOR",77:"SWITCH",80:"CASE",81:"DEFAULT",82:"BREAK",83:"CONTINUE",84:"RETURN",85:"<",86:">",87:"+",88:"-",89:"*",90:"/",91:"%",92:"&",93:"|",94:"^",95:"<=",96:">=",97:"==",98:"!=",99:"<<",100:">>",101:"<<<",102:">>>",103:"&&",104:"||",105:"^^",106:"RISING",107:"FALLING",108:"!",109:"++",110:"--",111:"+=",112:"-=",113:"*=",114:"/=",115:"%=",116:"<<=",117:">>=",118:"&=",119:"|=",120:"^=",122:"DEC_CONSTANT",123:"HEX_CONSTANT",124:"BIN_CONSTANT",125:"REAL_CONSTANT",127:"STRING_CONSTANT",128:"TRUE",129:"FALSE"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[12,5],[7,4],[7,7],[9,1],[23,3],[23,5],[10,1],[26,6],[11,4],[11,3],[8,5],[32,1],[32,2],[33,3],[33,5],[27,1],[35,5],[35,1],[37,1],[37,3],[37,0],[39,2],[29,2],[29,1],[29,1],[41,1],[41,2],[43,1],[43,2],[43,1],[45,1],[45,2],[42,1],[42,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,3],[46,3],[46,1],[47,3],[47,2],[48,2],[57,1],[57,1],[57,1],[60,3],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[58,3],[62,1],[62,4],[49,5],[49,3],[51,1],[51,1],[72,5],[72,7],[73,9],[73,8],[73,8],[73,8],[73,7],[73,7],[73,7],[73,6],[50,7],[78,1],[78,2],[79,4],[79,3],[79,3],[79,2],[52,2],[52,2],[52,2],[52,3],[18,1],[34,1],[61,4],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[65,3],[65,3],[65,3],[65,3],[64,3],[64,3],[64,3],[66,2],[66,2],[66,2],[67,2],[67,2],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[68,3],[68,4],[121,1],[121,3],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[21,1],[126,1],[126,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
			if(!main_func)
				throw new Error("Reached EOF without a main function defined");
			
			generateDbs();
			generateFns();
			
			//console.error(symbols);
		
break;
case 11:
            var begin = parseInt($$[$0-3].slice(2));
            var end = parseInt($$[$0-1].slice(2));
            registerMemoryBytes(begin, (end - begin) + 1);
        
break;
case 12: registerExternal(normalizeType($$[$0-3]), $$[$0-2], $$[$0-1], _$[$0-3]); 
break;
case 13: registerExternalArray(normalizeType($$[$0-6]), $$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6]); 
break;
case 14: registerGlobal($$[$0][0], $$[$0][1], $$[$0][2], _$[$0]); 
break;
case 15: this.$ = [normalizeType($$[$0-2]), $$[$0-1]]; 
break;
case 16: this.$ = [normalizeType($$[$0-4]), $$[$0-3], $$[$0-1]]; 
break;
case 17:
			registerSymbol($$[$0][1], {
				$: "array",
				type: $$[$0][0],
				length: $$[$0][2],
				twidth: $$[$0][3],
				offset: $$[$0][4]
			}, _$[$0]);
		
break;
case 18:
			if($$[$0-2] < 1)
				error("Zero-sized array are not allowed", _$[$0-5]);
				
			$$[$0-5] = normalizeType($$[$0-5]);
			var twidth = typeWidth($$[$0-5]);
			
			var offset;
			if(twidth) {
				offset = allocMemory(twidth * $$[$0-2]);
			} else {
				offset = allocMemory(Math.floor(($$[$0-2] - 1) / 8) + 1);
			}
			
			this.$ = [$$[$0-5], $$[$0-4], $$[$0-2], twidth, offset];
		
break;
case 19: fnEnd($$[$0-1].join("\n")) 
break;
case 20: fnEnd("") 
break;
case 21:
			
		
break;
case 22: this.$ = [$$[$0]]; 
break;
case 23: $$[$0-1].push($$[$0]); 
break;
case 24: this.$ = [$$[$0-1], $$[$0-2], null, _$[$0-2]]; 
break;
case 25: this.$ = [$$[$0-3], $$[$0-4], $$[$0-1], _$[$0-4]]; 
break;
case 26: fnBegin($$[$0], _$[$0]); 
break;
case 27:
			$$[$0-4] = normalizeType($$[$0-4]);
			if($$[$0-3] === "MAIN") {
				if($$[$0-4] !== "void" || $$[$0-1].length)
					error("main function must be declared 'void main()'", _$[$0-4]);
			}
			
			this.$ = { type: $$[$0-4], name: $$[$0-3], args: $$[$0-1] };
		
break;
case 28: this.$ = { type: "void", name: $$[$0], args: [] }; 
break;
case 29: this.$ = [$$[$0]]; 
break;
case 30: $$[$0-2].push($$[$0]); 
break;
case 31: this.$ = []; 
break;
case 32: this.$ = { type: normalizeType($$[$0-1]), name: $$[$0] }; 
break;
case 33: this.$ = $$[$0]; 
break;
case 34: this.$ = []; 
break;
case 38: fnDeclareVariable($$[$0][0], $$[$0][1], $$[$0][2], false, _$[$0]); 
break;
case 39: fnDeclareVariable($$[$0][0], $$[$0][1], $$[$0][2], true, _$[$0]); 
break;
case 40: 
			fnScopeAdd($$[$0][1], {
				$: "array",
				type: $$[$0][0],
				length: $$[$0][2],
				twidth: $$[$0][3],
				offset: $$[$0][4]
			}, _$[$0]);
		
break;
case 42: this.$ = $$[$0]; 
break;
case 43: this.$ = $$[$0] ? [$$[$0]] : []; 
break;
case 44: if($$[$0]) $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 46: this.$ = compileExpr($$[$0], _$[$0]); 
break;
case 47:
			var buffer = [];
			var else_label = generateLabel();
			var end_label = generateLabel();
			
			buffer.push(compileExpr(dynCast($$[$0].expr, "bit", _$[$0])));
			buffer.push("JCN " + ($$[$0].otherwise ? else_label : end_label));
			
			if($$[$0].then)
				buffer.push($$[$0].then);
				
			if($$[$0].otherwise) {
				buffer.push("JU " + end_label);
				buffer.push(else_label + ": " + $$[$0].otherwise);
			}
			
			buffer.push(end_label + ": NOP 0");
			this.$ = buffer.join("\n");
		
break;
case 48:
			var buffer = [];
			var end_label = generateLabel();
			var catch_label = generateLabel();
			var default_label = $$[$0].cases.map["default"] ? $$[$0].cases.map["default"].label : end_label;
			
			buffer.push(compileExpr(dynCast($$[$0].expr, "byte", _$[$0])));
			buffer.push("JL " + catch_label);
			
			var max_case = Object.keys($$[$0].cases.map).reduce(function(a, b) {
				if(b === "default")
					return a;
				else
					return parseInt(b) > a ? b : a;
			}, -1);
			
			for(var i = 0; i <= max_case; ++i) {
				if($$[$0].cases.map[i]) {
					buffer.push("JU " + $$[$0].cases.map[i].label);
				} else {
					buffer.push("JU " + default_label);
				}
			}
			
			buffer.push(catch_label + ": JU " + default_label);
			
			$$[$0].cases.list.forEach(function(c) {
				buffer.push(c.label + ": " + (c.body.length
					? c.body.join("\n").replace(/\$break/g, "JU " + end_label)
					: "NOP 0"));
			});
			
			buffer.push(end_label + ": NOP 0");
			this.$ = buffer.join("\n");
		
break;
case 51:
			this.$ = $$[$0].slice(2, -2).replace(/\#([a-zA-Z_][a-zA-Z0-9_]*)/mg, function(_, sym) {
				return fnScopeResolve(sym.toUpperCase(), _$[$0]).addr;
			});
		
break;
case 52: this.$ = "//" + $$[$0]; 
break;
case 53:
			if(func_buf.labels[$$[$0-2]])
				error("duplicate label: " + $$[$0-2], _$[$0-2]);
			this.$ = (func_buf.labels[$$[$0-2]] = generateLabel()) + ": " + $$[$0];
		
break;
case 54:
			this.$ = "$goto:" + $$[$0-1]
		
break;
case 55: this.$ = "NOP 0"; 
break;
case 56: this.$ = $$[$0-1].join("\n"); 
break;
case 57: this.$ = null; 
break;
case 60:
			this.$ = {
				$: "assign",
				type: $$[$0].ref.type,
				to: $$[$0].ref,
				expr: {
					$: "op",
					type: $$[$0].ref.type,
					op: $$[$0].op,
					a: $$[$0].ref,
					b: dynCast($$[$0].operand, $$[$0].ref.type, _$[$0])
				}
			};
		
break;
case 62: this.$ = $$[$0-1]; 
break;
case 66:
			var t = operationType($$[$0].op, $$[$0].a, $$[$0].b, _$[$0]);
			if(!$$[$0].type)
				$$[$0].type = t;
			$$[$0].a = dynCast($$[$0].a, t, _$[$0]);
			$$[$0].b = dynCast($$[$0].b, t, _$[$0]);
		
break;
case 68: $$[$0].type = ($$[$0].a.$ == "value") ? $$[$0].a.c_type || "byte" : $$[$0].a.type; 
break;
case 70:
			this.$ = {
				$: "assign",
				type: $$[$0].ref.type,
				to: { $: "ref", type: $$[$0].ref.type, ref: $$[$0].ref.ref },
				expr: {
					$: "op",
					type: $$[$0].ref.type,
					op: $$[$0].op,
					a: $$[$0].ref,
					b: dynCast({ $: "value", type: "integer", value: 1 }, $$[$0].ref.type, _$[$0])
				}
			};
		
break;
case 71:
			if($$[$0].fn[0] == "$") {
				if(!builtins[$$[$0].fn])
					error("undefined built-in: " + $$[$0].fn, _$[$0]);
				$$[$0].type = builtins[$$[$0].fn][0];
			} else {
				$$[$0].type = getSymbol($$[$0].fn).type;
			}
		
break;
case 72: this.$ = { $: "list", type: "polymorphic", code: $$[$0].slice(1, -1).replace(/;/g, "\n").replace(/\#([a-zA-Z_][a-zA-Z0-9_]*)/mg, function(_, sym) {
            return fnScopeResolve(sym.toUpperCase(), _$[$0]).addr;
        }) }; 
break;
case 73:
			this.$ = { $: "assign", type: $$[$0-2].type, to: $$[$0-2], expr: dynCast($$[$0], $$[$0-2].type, _$[$0-2]) };
		
break;
case 74:
			if(fnScopeResolve($$[$0], _$[$0]).$ !== "variable" && fnScopeResolve($$[$0], _$[$0]).$ !== "external" && fnScopeResolve($$[$0], _$[$0]).$ !== "argument")
				error("reference must be a variable symbol", _$[$0]);
			this.$ = { $: "ref", type: resolveType($$[$0], _$[$0]), ref: $$[$0] };
		
break;
case 75:
			if(fnScopeResolve($$[$0-3], _$[$0-3]).$ !== "array" && fnScopeResolve($$[$0-3], _$[$0-3]).$ !== "external-array")
				error("dereferencing base must be an array symbol", _$[$0-3]);
			this.$ = { $: "array-ref", type: resolveType($$[$0-3], _$[$0-3]), ref: $$[$0-3], index: $$[$0-1] };
		
break;
case 76: this.$ = { expr: $$[$0-2], then: $$[$0] }; 
break;
case 77: $$[$0-2].otherwise = $$[$0]; 
break;
case 78:
			var buffer = [];
			var loop_label = generateLabel();
			var cond_label = generateLabel();
			var end_label  = generateLabel();
			
			var cond = cond_label + ": "
				+ compileExpr(dynCast($$[$0].cond, "bit", _$[$0])) + "\n"
				+ ($$[$0].do_while ? "JC " + loop_label : "JCN " + end_label);
			
			if(!$$[$0].do_while) buffer.push(cond);
			
			var loop = $$[$0].loop
				.replace(/\$break/g, "JU " + end_label)
				.replace(/\$continue/g, "JU " + cond_label);
				
			buffer.push(loop_label + ": " + loop);
			
			if(!$$[$0].do_while)
				buffer.push("JU " + cond_label);
			else
				buffer.push(cond);
			
			buffer.push(end_label + ": NOP 0");
			this.$ = buffer.join("\n");
		
break;
case 79:
			var buffer = [];
			if($$[$0].init) buffer.push(compileExpr($$[$0].init));
			
			var loop_label = generateLabel();
			var cond_label = $$[$0].cond ? generateLabel() : loop_label;
			var inc_label  = $$[$0].inc ? generateLabel() : cond_label;
			var end_label  = generateLabel();
			
			if($$[$0].cond) {
				buffer.push(cond_label + ": "
					+ compileExpr(dynCast($$[$0].cond, "bit", _$[$0])) + "\n"
					+ "JCN " + end_label);
			}
			
			var loop;
			if($$[$0].loop) {
				loop = $$[$0].loop
					.replace(/\$break/g, "JU " + end_label)
					.replace(/\$continue/g, "JU " + inc_label);
			} else {
				loop = "NOP 0";
			}
			buffer.push(loop_label + ": " + loop);
			
			if($$[$0].inc) buffer.push(inc_label + ": " + compileExpr($$[$0].inc))
			
			buffer.push("JU " + cond_label);
			buffer.push(end_label + ": NOP 0");
			this.$ = buffer.join("\n");
		
break;
case 80: this.$ = { cond: $$[$0-2], loop: $$[$0], do_while: false }; 
break;
case 81: this.$ = { cond: $$[$0-2], loop: $$[$0-5], do_while: true }; 
break;
case 82: this.$ = { init: $$[$0-6], cond: $$[$0-4], inc: $$[$0-2], loop: $$[$0] }; 
break;
case 83: this.$ = { init: null, cond: $$[$0-4], inc: $$[$0-2], loop: $$[$0] }; 
break;
case 84: this.$ = { init: $$[$0-5], cond: null, inc: $$[$0-2], loop: $$[$0] }; 
break;
case 85: this.$ = { init: $$[$0-5], cond: $$[$0-3], inc: null, loop: $$[$0] }; 
break;
case 86: this.$ = { init: $$[$0-4], cond: null, inc: null, loop: $$[$0] }; 
break;
case 87: this.$ = { init: null, cond: $$[$0-3], inc: null, loop: $$[$0] }; 
break;
case 88: this.$ = { init: null, cond: null, inc: $$[$0-2], loop: $$[$0] }; 
break;
case 89: this.$ = { init: null, cond: null, inc: null, loop: $$[$0] }; 
break;
case 90: this.$ = { expr: $$[$0-4], cases: $$[$0-1] }; 
break;
case 91: this.$ = { map: {}, list: [] }; this.$.list.push(this.$.map[$$[$0].key] = $$[$0]); 
break;
case 92:
			if(this.$.map[$$[$0].key])
				error("duplicated case: " + $$[$0].key, _$[$0]);
			this.$.list.push(this.$.map[$$[$0].key] = $$[$0]);
		
break;
case 93:
			validateCase($$[$0-2], _$[$0-3]);
			this.$ = { key: $$[$0-2], body: $$[$0], label: generateLabel() };
		
break;
case 94:
			validateCase($$[$0-1], _$[$0-2]);
			this.$ = { key: $$[$0-1], body: [], label: generateLabel() };
		
break;
case 95: this.$ = { key: "default", body: $$[$0], label: generateLabel() }; 
break;
case 96: this.$ = { key: "default", body: [], label: generateLabel() }; 
break;
case 97: this.$ = "$break"; 
break;
case 98: this.$ = "$continue"; 
break;
case 99: this.$ = "$return"; 
break;
case 100:
			this.$ = [
				compileExpr({
					$: "assign",
					type: func_buf.type,
					to: { $: "ref", type: func_buf.type, ref: "RET_VAL" },
					expr: dynCast($$[$0-1], func_buf.type, _$[$0-2])
				}, _$[$0-2]),
				"$return"
			].join("\n");
		
break;
case 101: this.$ = $$[$0].toUpperCase(); 
break;
case 103: this.$ = dynCast($$[$0], normalizeType($$[$0-2]), _$[$0-3]); 
break;
case 104: this.$ = { $: "op", op: "+", a: $$[$0-2], b: $$[$0] }; 
break;
case 105: this.$ = { $: "op", op: "-", a: $$[$0-2], b: $$[$0] }; 
break;
case 106: this.$ = { $: "op", op: "*", a: $$[$0-2], b: $$[$0] }; 
break;
case 107: this.$ = { $: "op", op: "/", a: $$[$0-2], b: $$[$0] }; 
break;
case 108: this.$ = { $: "op", op: "%", a: $$[$0-2], b: $$[$0] }; 
break;
case 109: this.$ = { $: "op", op: "&", a: $$[$0-2], b: $$[$0] }; 
break;
case 110: this.$ = { $: "op", op: "|", a: $$[$0-2], b: $$[$0] }; 
break;
case 111: this.$ = { $: "op", op: "^", a: $$[$0-2], b: $$[$0] }; 
break;
case 112: this.$ = { $: "op", op: "<", type: "bit", a: $$[$0-2], b: $$[$0] }; 
break;
case 113: this.$ = { $: "op", op: "<=", type: "bit", a: $$[$0-2], b: $$[$0] }; 
break;
case 114: this.$ = { $: "op", op: ">", type: "bit", a: $$[$0-2], b: $$[$0] }; 
break;
case 115: this.$ = { $: "op", op: ">=", type: "bit", a: $$[$0-2], b: $$[$0] }; 
break;
case 116: this.$ = { $: "op", op: "==", type: "bit", a: $$[$0-2], b: $$[$0] }; 
break;
case 117: this.$ = { $: "op", op: "!=", type: "bit", a: $$[$0-2], b: $$[$0] }; 
break;
case 118: this.$ = { $: "op", op: "<<", a: $$[$0-2], b: dynCast($$[$0], "byte", _$[$0]) }; 
break;
case 119: this.$ = { $: "op", op: ">>", a: $$[$0-2], b: dynCast($$[$0], "byte", _$[$0]) }; 
break;
case 120: this.$ = { $: "op", op: "<<<", a: dynCast($$[$0-2], "long", _$[$0-2]), b: dynCast($$[$0], "byte", _$[$0]) }; 
break;
case 121: this.$ = { $: "op", op: ">>>", a: dynCast($$[$0-2], "long", _$[$0-2]), b: dynCast($$[$0], "byte", _$[$0]) }; 
break;
case 122: this.$ = { $: "op", op: "&&", type: "bit", a: dynCast($$[$0-2], "bit", _$[$0-2]), b: dynCast($$[$0], "bit", _$[$0]) }; 
break;
case 123: this.$ = { $: "op", op: "||", type: "bit", a: dynCast($$[$0-2], "bit", _$[$0-2]), b: dynCast($$[$0], "bit", _$[$0]) }; 
break;
case 124: this.$ = { $: "op", op: "^^", type: "bit", a: dynCast($$[$0-2], "bit", _$[$0-2]), b: dynCast($$[$0], "bit", _$[$0]) }; 
break;
case 125: this.$ = { $: "op", type: "bit", op: "'r", a: dynCast($$[$0-1], "bit", _$[$0-1]) }; 
break;
case 126: this.$ = { $: "op", type: "bit", op: "'f", a: dynCast($$[$0-1], "bit", _$[$0-1]) }; 
break;
case 127: this.$ = { $: "op", type: "bit", op: "!", a: dynCast($$[$0], "bit", _$[$0-1]) }; 
break;
case 128: this.$ = { op: "+", ref: $$[$0] }; 
break;
case 129: this.$ = { op: "-", ref: $$[$0] }; 
break;
case 130: this.$ = { op: "+", ref: $$[$0-2], operand: $$[$0] }; 
break;
case 131: this.$ = { op: "-", ref: $$[$0-2], operand: $$[$0] }; 
break;
case 132: this.$ = { op: "*", ref: $$[$0-2], operand: $$[$0] }; 
break;
case 133: this.$ = { op: "/", ref: $$[$0-2], operand: $$[$0] }; 
break;
case 134: this.$ = { op: "%", ref: $$[$0-2], operand: $$[$0] }; 
break;
case 135: this.$ = { op: "<<", ref: $$[$0-2], operand: $$[$0] }; 
break;
case 136: this.$ = { op: ">>", ref: $$[$0-2], operand: $$[$0] }; 
break;
case 137: this.$ = { op: "&", ref: $$[$0-2], operand: $$[$0] }; 
break;
case 138: this.$ = { op: "|", ref: $$[$0-2], operand: $$[$0] }; 
break;
case 139: this.$ = { op: "^", ref: $$[$0-2], operand: $$[$0] }; 
break;
case 140: this.$ = { $: "call", fn: $$[$0-2], args: [] }; 
break;
case 141: this.$ = { $: "call", fn: $$[$0-3], args: $$[$0-1] }; 
break;
case 142: this.$ = [$$[$0]]; 
break;
case 143: $$[$0-2].push($$[$0]); 
break;
case 144: this.$ = { $: "value", type: "integer", value: parseInt($$[$0].replace(/_/g, ""), 10) }; 
break;
case 145: this.$ = { $: "value", type: "integer", value: parseInt($$[$0].slice(2).replace(/_/g, ""), 16) }; 
break;
case 146: this.$ = { $: "value", type: "integer", value: parseInt($$[$0].slice(2).replace(/_/g, ""), 2) }; 
break;
case 147: this.$ = { $: "value", type: "real", value: ($$[$0].replace(/_/g, "")) * 1 }; 
break;
case 148: this.$ = { $: "value", type: "boolean", value: $$[$0] }; 
break;
case 149: this.$ = { $: "value", type: "string", value: $$[$0].slice(1, -1) }; 
break;
case 150: this.$ = parseInt($$[$0], 10); 
break;
case 151: this.$ = true; 
break;
case 152: this.$ = false; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:[1,16],17:[1,11],18:18,23:13,26:14,27:15,31:[1,12],35:17},{1:[3]},{5:[1,19],6:20,7:5,8:6,9:7,10:8,11:9,12:10,13:[1,16],17:[1,11],18:18,23:13,26:14,27:15,31:[1,12],35:17},{1:[2,2]},{5:[2,3],13:[2,3],17:[2,3],31:[2,3]},{5:[2,5],13:[2,5],17:[2,5],31:[2,5]},{5:[2,6],13:[2,6],17:[2,6],31:[2,6]},{5:[2,7],13:[2,7],17:[2,7],31:[2,7]},{5:[2,8],13:[2,8],17:[2,8],31:[2,8]},{5:[2,9],13:[2,9],17:[2,9],31:[2,9]},{5:[2,10],13:[2,10],17:[2,10],31:[2,10]},{17:[1,22],18:21,28:[2,101]},{17:[1,22],18:23},{5:[2,14],13:[2,14],17:[2,14],31:[2,14]},{5:[2,17],13:[2,17],17:[2,17],31:[2,17]},{28:[1,24]},{14:[1,25]},{28:[2,26]},{28:[2,28]},{1:[2,1]},{5:[2,4],13:[2,4],17:[2,4],31:[2,4]},{16:[1,28],19:[1,26],20:[1,27],24:[1,29],36:[1,30]},{16:[2,101],19:[2,101],20:[2,101],22:[2,101],24:[2,101],28:[2,101],36:[2,101],38:[2,101],40:[2,101],55:[2,101],85:[2,101],86:[2,101],87:[2,101],88:[2,101],89:[2,101],90:[2,101],91:[2,101],92:[2,101],93:[2,101],94:[2,101],95:[2,101],96:[2,101],97:[2,101],98:[2,101],99:[2,101],100:[2,101],101:[2,101],102:[2,101],103:[2,101],104:[2,101],105:[2,101],106:[2,101],107:[2,101],111:[2,101],112:[2,101],113:[2,101],114:[2,101],115:[2,101],116:[2,101],117:[2,101],118:[2,101],119:[2,101],120:[2,101]},{28:[1,31]},{16:[1,51],17:[1,52],18:49,23:38,25:72,26:53,28:[1,54],29:32,30:[1,33],36:[1,70],41:34,42:35,43:36,44:[1,39],45:40,46:37,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{15:[1,92]},{16:[1,93]},{21:94,122:[1,95]},{5:[2,15],13:[2,15],16:[2,15],17:[2,15],28:[2,15],30:[2,15],31:[2,15],36:[2,15],44:[2,15],53:[2,15],54:[2,15],56:[2,15],69:[2,15],70:[2,15],74:[2,15],75:[2,15],76:[2,15],77:[2,15],82:[2,15],83:[2,15],84:[2,15],85:[2,15],108:[2,15],109:[2,15],110:[2,15],122:[2,15],123:[2,15],124:[2,15],125:[2,15],127:[2,15],128:[2,15],129:[2,15]},{25:96,122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,99],37:97,38:[2,31],39:98,40:[2,31]},{17:[1,103],32:100,33:101,34:102},{30:[1,104]},{5:[2,20],13:[2,20],17:[2,20],31:[2,20]},{16:[1,51],17:[1,52],18:49,23:38,25:72,26:53,28:[1,54],30:[2,34],36:[1,70],42:105,43:106,44:[1,39],45:40,46:37,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],30:[2,35],36:[1,70],46:107,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,36],17:[2,36],28:[2,36],30:[2,36],36:[2,36],44:[2,36],53:[2,36],54:[2,36],56:[2,36],69:[2,36],70:[2,36],74:[2,36],75:[2,36],76:[2,36],77:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36],108:[2,36],109:[2,36],110:[2,36],122:[2,36],123:[2,36],124:[2,36],125:[2,36],127:[2,36],128:[2,36],129:[2,36]},{16:[2,43],17:[2,43],28:[2,43],30:[2,43],36:[2,43],53:[2,43],54:[2,43],56:[2,43],69:[2,43],70:[2,43],74:[2,43],75:[2,43],76:[2,43],77:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],108:[2,43],109:[2,43],110:[2,43],122:[2,43],123:[2,43],124:[2,43],125:[2,43],127:[2,43],128:[2,43],129:[2,43]},{16:[2,38],17:[2,38],28:[2,38],30:[2,38],36:[2,38],44:[2,38],53:[2,38],54:[2,38],56:[2,38],69:[2,38],70:[2,38],74:[2,38],75:[2,38],76:[2,38],77:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38],108:[2,38],109:[2,38],110:[2,38],122:[2,38],123:[2,38],124:[2,38],125:[2,38],127:[2,38],128:[2,38],129:[2,38]},{17:[1,110],23:108,26:109},{16:[2,40],17:[2,40],28:[2,40],30:[2,40],36:[2,40],44:[2,40],53:[2,40],54:[2,40],56:[2,40],69:[2,40],70:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40],108:[2,40],109:[2,40],110:[2,40],122:[2,40],123:[2,40],124:[2,40],125:[2,40],127:[2,40],128:[2,40],129:[2,40]},{16:[2,45],17:[2,45],28:[2,45],30:[2,45],36:[2,45],53:[2,45],54:[2,45],56:[2,45],69:[2,45],70:[2,45],71:[2,45],74:[2,45],75:[2,45],76:[2,45],77:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],108:[2,45],109:[2,45],110:[2,45],122:[2,45],123:[2,45],124:[2,45],125:[2,45],127:[2,45],128:[2,45],129:[2,45]},{16:[2,46],17:[2,46],28:[2,46],30:[2,46],36:[2,46],53:[2,46],54:[2,46],56:[2,46],69:[2,46],70:[2,46],71:[2,46],74:[2,46],75:[2,46],76:[2,46],77:[2,46],80:[2,46],81:[2,46],82:[2,46],83:[2,46],84:[2,46],85:[2,46],108:[2,46],109:[2,46],110:[2,46],122:[2,46],123:[2,46],124:[2,46],125:[2,46],127:[2,46],128:[2,46],129:[2,46]},{16:[2,47],17:[2,47],28:[2,47],30:[2,47],36:[2,47],53:[2,47],54:[2,47],56:[2,47],69:[2,47],70:[2,47],71:[1,111],74:[2,47],75:[2,47],76:[2,47],77:[2,47],80:[2,47],81:[2,47],82:[2,47],83:[2,47],84:[2,47],85:[2,47],108:[2,47],109:[2,47],110:[2,47],122:[2,47],123:[2,47],124:[2,47],125:[2,47],127:[2,47],128:[2,47],129:[2,47]},{16:[2,48],17:[2,48],28:[2,48],30:[2,48],36:[2,48],53:[2,48],54:[2,48],56:[2,48],69:[2,48],70:[2,48],71:[2,48],74:[2,48],75:[2,48],76:[2,48],77:[2,48],80:[2,48],81:[2,48],82:[2,48],83:[2,48],84:[2,48],85:[2,48],108:[2,48],109:[2,48],110:[2,48],122:[2,48],123:[2,48],124:[2,48],125:[2,48],127:[2,48],128:[2,48],129:[2,48]},{16:[2,49],17:[2,49],28:[2,49],30:[2,49],36:[2,49],53:[2,49],54:[2,49],56:[2,49],69:[2,49],70:[2,49],71:[2,49],74:[2,49],75:[2,49],76:[2,49],77:[2,49],80:[2,49],81:[2,49],82:[2,49],83:[2,49],84:[2,49],85:[2,49],108:[2,49],109:[2,49],110:[2,49],122:[2,49],123:[2,49],124:[2,49],125:[2,49],127:[2,49],128:[2,49],129:[2,49]},{16:[2,50],17:[2,50],28:[2,50],30:[2,50],36:[2,50],53:[2,50],54:[2,50],56:[2,50],69:[2,50],70:[2,50],71:[2,50],74:[2,50],75:[2,50],76:[2,50],77:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50],108:[2,50],109:[2,50],110:[2,50],122:[2,50],123:[2,50],124:[2,50],125:[2,50],127:[2,50],128:[2,50],129:[2,50]},{16:[2,51],17:[2,51],28:[2,51],30:[2,51],36:[2,51],53:[2,51],54:[2,51],56:[2,51],69:[2,51],70:[2,51],71:[2,51],74:[2,51],75:[2,51],76:[2,51],77:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51],108:[2,51],109:[2,51],110:[2,51],122:[2,51],123:[2,51],124:[2,51],125:[2,51],127:[2,51],128:[2,51],129:[2,51]},{16:[2,52],17:[2,52],28:[2,52],30:[2,52],36:[2,52],53:[2,52],54:[2,52],56:[2,52],69:[2,52],70:[2,52],71:[2,52],74:[2,52],75:[2,52],76:[2,52],77:[2,52],80:[2,52],81:[2,52],82:[2,52],83:[2,52],84:[2,52],85:[2,52],108:[2,52],109:[2,52],110:[2,52],122:[2,52],123:[2,52],124:[2,52],125:[2,52],127:[2,52],128:[2,52],129:[2,52]},{16:[2,74],20:[1,113],24:[2,74],36:[1,114],55:[1,112],85:[2,74],86:[2,74],87:[2,74],88:[2,74],89:[2,74],90:[2,74],91:[2,74],92:[2,74],93:[2,74],94:[2,74],95:[2,74],96:[2,74],97:[2,74],98:[2,74],99:[2,74],100:[2,74],101:[2,74],102:[2,74],103:[2,74],104:[2,74],105:[2,74],106:[2,74],107:[2,74],111:[2,74],112:[2,74],113:[2,74],114:[2,74],115:[2,74],116:[2,74],117:[2,74],118:[2,74],119:[2,74],120:[2,74]},{17:[1,22],18:115},{16:[2,55],17:[2,55],28:[2,55],30:[2,55],36:[2,55],53:[2,55],54:[2,55],56:[2,55],69:[2,55],70:[2,55],71:[2,55],74:[2,55],75:[2,55],76:[2,55],77:[2,55],80:[2,55],81:[2,55],82:[2,55],83:[2,55],84:[2,55],85:[2,55],108:[2,55],109:[2,55],110:[2,55],122:[2,55],123:[2,55],124:[2,55],125:[2,55],127:[2,55],128:[2,55],129:[2,55]},{16:[2,101],17:[1,22],18:116,20:[2,101],24:[2,101],36:[2,101],55:[2,101],85:[2,101],86:[2,101],87:[2,101],88:[2,101],89:[2,101],90:[2,101],91:[2,101],92:[2,101],93:[2,101],94:[2,101],95:[2,101],96:[2,101],97:[2,101],98:[2,101],99:[2,101],100:[2,101],101:[2,101],102:[2,101],103:[2,101],104:[2,101],105:[2,101],106:[2,101],107:[2,101],111:[2,101],112:[2,101],113:[2,101],114:[2,101],115:[2,101],116:[2,101],117:[2,101],118:[2,101],119:[2,101],120:[2,101]},{16:[2,41],17:[2,41],28:[2,41],30:[2,41],36:[2,41],44:[2,41],53:[2,41],54:[2,41],56:[2,41],69:[2,41],70:[2,41],74:[2,41],75:[2,41],76:[2,41],77:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41],108:[2,41],109:[2,41],110:[2,41],122:[2,41],123:[2,41],124:[2,41],125:[2,41],127:[2,41],128:[2,41],129:[2,41]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],30:[1,118],36:[1,70],42:117,46:37,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[1,119]},{36:[1,120]},{36:[1,121]},{16:[2,78],17:[2,78],28:[2,78],30:[2,78],36:[2,78],53:[2,78],54:[2,78],56:[2,78],69:[2,78],70:[2,78],71:[2,78],74:[2,78],75:[2,78],76:[2,78],77:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78],108:[2,78],109:[2,78],110:[2,78],122:[2,78],123:[2,78],124:[2,78],125:[2,78],127:[2,78],128:[2,78],129:[2,78]},{16:[2,79],17:[2,79],28:[2,79],30:[2,79],36:[2,79],53:[2,79],54:[2,79],56:[2,79],69:[2,79],70:[2,79],71:[2,79],74:[2,79],75:[2,79],76:[2,79],77:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79],108:[2,79],109:[2,79],110:[2,79],122:[2,79],123:[2,79],124:[2,79],125:[2,79],127:[2,79],128:[2,79],129:[2,79]},{16:[1,122]},{16:[1,123]},{16:[1,124],17:[1,22],18:126,25:72,36:[1,70],57:125,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,59],22:[2,59],38:[2,59],40:[2,59]},{16:[2,60],22:[2,60],38:[2,60],40:[2,60]},{16:[2,61],22:[2,61],38:[2,61],40:[2,61],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{36:[1,150]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:151,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{36:[1,152]},{16:[2,65],22:[2,65],24:[1,153],38:[2,65],40:[2,65],85:[2,65],86:[2,65],87:[2,65],88:[2,65],89:[2,65],90:[2,65],91:[2,65],92:[2,65],93:[2,65],94:[2,65],95:[2,65],96:[2,65],97:[2,65],98:[2,65],99:[2,65],100:[2,65],101:[2,65],102:[2,65],103:[2,65],104:[2,65],105:[2,65],106:[2,65],107:[2,65],111:[1,154],112:[1,155],113:[1,156],114:[1,157],115:[1,158],116:[1,159],117:[1,160],118:[1,161],119:[1,162],120:[1,163]},{17:[1,22],18:126,25:72,36:[1,70],57:164,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,63],22:[2,63],38:[2,63],40:[2,63],85:[2,63],86:[2,63],87:[2,63],88:[2,63],89:[2,63],90:[2,63],91:[2,63],92:[2,63],93:[2,63],94:[2,63],95:[2,63],96:[2,63],97:[2,63],98:[2,63],99:[2,63],100:[2,63],101:[2,63],102:[2,63],103:[2,63],104:[2,63],105:[2,63],106:[2,63],107:[2,63]},{16:[2,64],22:[2,64],38:[2,64],40:[2,64],85:[2,64],86:[2,64],87:[2,64],88:[2,64],89:[2,64],90:[2,64],91:[2,64],92:[2,64],93:[2,64],94:[2,64],95:[2,64],96:[2,64],97:[2,64],98:[2,64],99:[2,64],100:[2,64],101:[2,64],102:[2,64],103:[2,64],104:[2,64],105:[2,64],106:[2,64],107:[2,64]},{16:[2,66],22:[2,66],38:[2,66],40:[2,66],85:[2,66],86:[2,66],87:[2,66],88:[2,66],89:[2,66],90:[2,66],91:[2,66],92:[2,66],93:[2,66],94:[2,66],95:[2,66],96:[2,66],97:[2,66],98:[2,66],99:[2,66],100:[2,66],101:[2,66],102:[2,66],103:[2,66],104:[2,66],105:[2,66],106:[2,66],107:[2,66]},{16:[2,67],22:[2,67],38:[2,67],40:[2,67],85:[2,67],86:[2,67],87:[2,67],88:[2,67],89:[2,67],90:[2,67],91:[2,67],92:[2,67],93:[2,67],94:[2,67],95:[2,67],96:[2,67],97:[2,67],98:[2,67],99:[2,67],100:[2,67],101:[2,67],102:[2,67],103:[2,67],104:[2,67],105:[2,67],106:[2,67],107:[2,67]},{16:[2,68],22:[2,68],38:[2,68],40:[2,68],85:[2,68],86:[2,68],87:[2,68],88:[2,68],89:[2,68],90:[2,68],91:[2,68],92:[2,68],93:[2,68],94:[2,68],95:[2,68],96:[2,68],97:[2,68],98:[2,68],99:[2,68],100:[2,68],101:[2,68],102:[2,68],103:[2,68],104:[2,68],105:[2,68],106:[2,68],107:[2,68]},{16:[2,69],22:[2,69],38:[2,69],40:[2,69],85:[2,69],86:[2,69],87:[2,69],88:[2,69],89:[2,69],90:[2,69],91:[2,69],92:[2,69],93:[2,69],94:[2,69],95:[2,69],96:[2,69],97:[2,69],98:[2,69],99:[2,69],100:[2,69],101:[2,69],102:[2,69],103:[2,69],104:[2,69],105:[2,69],106:[2,69],107:[2,69]},{16:[2,70],22:[2,70],38:[2,70],40:[2,70],85:[2,70],86:[2,70],87:[2,70],88:[2,70],89:[2,70],90:[2,70],91:[2,70],92:[2,70],93:[2,70],94:[2,70],95:[2,70],96:[2,70],97:[2,70],98:[2,70],99:[2,70],100:[2,70],101:[2,70],102:[2,70],103:[2,70],104:[2,70],105:[2,70],106:[2,70],107:[2,70]},{16:[2,71],22:[2,71],38:[2,71],40:[2,71],85:[2,71],86:[2,71],87:[2,71],88:[2,71],89:[2,71],90:[2,71],91:[2,71],92:[2,71],93:[2,71],94:[2,71],95:[2,71],96:[2,71],97:[2,71],98:[2,71],99:[2,71],100:[2,71],101:[2,71],102:[2,71],103:[2,71],104:[2,71],105:[2,71],106:[2,71],107:[2,71]},{16:[2,72],22:[2,72],38:[2,72],40:[2,72],85:[2,72],86:[2,72],87:[2,72],88:[2,72],89:[2,72],90:[2,72],91:[2,72],92:[2,72],93:[2,72],94:[2,72],95:[2,72],96:[2,72],97:[2,72],98:[2,72],99:[2,72],100:[2,72],101:[2,72],102:[2,72],103:[2,72],104:[2,72],105:[2,72],106:[2,72],107:[2,72]},{17:[1,165]},{16:[2,144],22:[2,144],38:[2,144],40:[2,144],85:[2,144],86:[2,144],87:[2,144],88:[2,144],89:[2,144],90:[2,144],91:[2,144],92:[2,144],93:[2,144],94:[2,144],95:[2,144],96:[2,144],97:[2,144],98:[2,144],99:[2,144],100:[2,144],101:[2,144],102:[2,144],103:[2,144],104:[2,144],105:[2,144],106:[2,144],107:[2,144]},{16:[2,145],22:[2,145],38:[2,145],40:[2,145],85:[2,145],86:[2,145],87:[2,145],88:[2,145],89:[2,145],90:[2,145],91:[2,145],92:[2,145],93:[2,145],94:[2,145],95:[2,145],96:[2,145],97:[2,145],98:[2,145],99:[2,145],100:[2,145],101:[2,145],102:[2,145],103:[2,145],104:[2,145],105:[2,145],106:[2,145],107:[2,145]},{16:[2,146],22:[2,146],38:[2,146],40:[2,146],85:[2,146],86:[2,146],87:[2,146],88:[2,146],89:[2,146],90:[2,146],91:[2,146],92:[2,146],93:[2,146],94:[2,146],95:[2,146],96:[2,146],97:[2,146],98:[2,146],99:[2,146],100:[2,146],101:[2,146],102:[2,146],103:[2,146],104:[2,146],105:[2,146],106:[2,146],107:[2,146]},{16:[2,147],22:[2,147],38:[2,147],40:[2,147],85:[2,147],86:[2,147],87:[2,147],88:[2,147],89:[2,147],90:[2,147],91:[2,147],92:[2,147],93:[2,147],94:[2,147],95:[2,147],96:[2,147],97:[2,147],98:[2,147],99:[2,147],100:[2,147],101:[2,147],102:[2,147],103:[2,147],104:[2,147],105:[2,147],106:[2,147],107:[2,147]},{16:[2,148],22:[2,148],38:[2,148],40:[2,148],85:[2,148],86:[2,148],87:[2,148],88:[2,148],89:[2,148],90:[2,148],91:[2,148],92:[2,148],93:[2,148],94:[2,148],95:[2,148],96:[2,148],97:[2,148],98:[2,148],99:[2,148],100:[2,148],101:[2,148],102:[2,148],103:[2,148],104:[2,148],105:[2,148],106:[2,148],107:[2,148]},{16:[2,149],22:[2,149],38:[2,149],40:[2,149],85:[2,149],86:[2,149],87:[2,149],88:[2,149],89:[2,149],90:[2,149],91:[2,149],92:[2,149],93:[2,149],94:[2,149],95:[2,149],96:[2,149],97:[2,149],98:[2,149],99:[2,149],100:[2,149],101:[2,149],102:[2,149],103:[2,149],104:[2,149],105:[2,149],106:[2,149],107:[2,149]},{17:[1,22],18:126,25:72,36:[1,70],60:166,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:169,62:168},{17:[1,22],18:169,62:170},{16:[2,151],22:[2,151],38:[2,151],40:[2,151],85:[2,151],86:[2,151],87:[2,151],88:[2,151],89:[2,151],90:[2,151],91:[2,151],92:[2,151],93:[2,151],94:[2,151],95:[2,151],96:[2,151],97:[2,151],98:[2,151],99:[2,151],100:[2,151],101:[2,151],102:[2,151],103:[2,151],104:[2,151],105:[2,151],106:[2,151],107:[2,151]},{16:[2,152],22:[2,152],38:[2,152],40:[2,152],85:[2,152],86:[2,152],87:[2,152],88:[2,152],89:[2,152],90:[2,152],91:[2,152],92:[2,152],93:[2,152],94:[2,152],95:[2,152],96:[2,152],97:[2,152],98:[2,152],99:[2,152],100:[2,152],101:[2,152],102:[2,152],103:[2,152],104:[2,152],105:[2,152],106:[2,152],107:[2,152]},{14:[1,171]},{5:[2,12],13:[2,12],17:[2,12],31:[2,12]},{22:[1,172]},{22:[2,150],55:[2,150]},{16:[1,173]},{38:[1,174],40:[1,175]},{38:[2,29],40:[2,29]},{17:[1,22],18:176},{17:[1,103],30:[1,177],33:178,34:102},{17:[2,22],30:[2,22]},{17:[1,22],18:179},{17:[2,102]},{5:[2,19],13:[2,19],17:[2,19],31:[2,19]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],30:[2,33],36:[1,70],46:107,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,37],17:[2,37],28:[2,37],30:[2,37],36:[2,37],44:[2,37],53:[2,37],54:[2,37],56:[2,37],69:[2,37],70:[2,37],74:[2,37],75:[2,37],76:[2,37],77:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37],108:[2,37],109:[2,37],110:[2,37],122:[2,37],123:[2,37],124:[2,37],125:[2,37],127:[2,37],128:[2,37],129:[2,37]},{16:[2,44],17:[2,44],28:[2,44],30:[2,44],36:[2,44],53:[2,44],54:[2,44],56:[2,44],69:[2,44],70:[2,44],74:[2,44],75:[2,44],76:[2,44],77:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],108:[2,44],109:[2,44],110:[2,44],122:[2,44],123:[2,44],124:[2,44],125:[2,44],127:[2,44],128:[2,44],129:[2,44]},{16:[2,39],17:[2,39],28:[2,39],30:[2,39],36:[2,39],44:[2,39],53:[2,39],54:[2,39],56:[2,39],69:[2,39],70:[2,39],74:[2,39],75:[2,39],76:[2,39],77:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39],108:[2,39],109:[2,39],110:[2,39],122:[2,39],123:[2,39],124:[2,39],125:[2,39],127:[2,39],128:[2,39],129:[2,39]},{16:[2,42],17:[2,42],28:[2,42],30:[2,42],36:[2,42],44:[2,42],53:[2,42],54:[2,42],56:[2,42],69:[2,42],70:[2,42],74:[2,42],75:[2,42],76:[2,42],77:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],108:[2,42],109:[2,42],110:[2,42],122:[2,42],123:[2,42],124:[2,42],125:[2,42],127:[2,42],128:[2,42],129:[2,42]},{17:[1,22],18:116},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:180,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:181,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],57:182,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],38:[1,183],57:185,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],121:184,122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[1,186]},{16:[1,28],20:[1,187],24:[1,29]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],30:[1,188],36:[1,70],46:107,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,57],17:[2,57],28:[2,57],30:[2,57],36:[2,57],53:[2,57],54:[2,57],56:[2,57],69:[2,57],70:[2,57],71:[2,57],74:[2,57],75:[2,57],76:[2,57],77:[2,57],80:[2,57],81:[2,57],82:[2,57],83:[2,57],84:[2,57],85:[2,57],108:[2,57],109:[2,57],110:[2,57],122:[2,57],123:[2,57],124:[2,57],125:[2,57],127:[2,57],128:[2,57],129:[2,57]},{16:[2,58],17:[2,58],28:[2,58],30:[2,58],36:[2,58],53:[2,58],54:[2,58],56:[2,58],69:[2,58],70:[2,58],71:[2,58],74:[2,58],75:[2,58],76:[2,58],77:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58],108:[2,58],109:[2,58],110:[2,58],122:[2,58],123:[2,58],124:[2,58],125:[2,58],127:[2,58],128:[2,58],129:[2,58]},{17:[1,22],18:126,25:72,36:[1,70],57:189,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],57:190,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,97],17:[2,97],28:[2,97],30:[2,97],36:[2,97],53:[2,97],54:[2,97],56:[2,97],69:[2,97],70:[2,97],71:[2,97],74:[2,97],75:[2,97],76:[2,97],77:[2,97],80:[2,97],81:[2,97],82:[2,97],83:[2,97],84:[2,97],85:[2,97],108:[2,97],109:[2,97],110:[2,97],122:[2,97],123:[2,97],124:[2,97],125:[2,97],127:[2,97],128:[2,97],129:[2,97]},{16:[2,98],17:[2,98],28:[2,98],30:[2,98],36:[2,98],53:[2,98],54:[2,98],56:[2,98],69:[2,98],70:[2,98],71:[2,98],74:[2,98],75:[2,98],76:[2,98],77:[2,98],80:[2,98],81:[2,98],82:[2,98],83:[2,98],84:[2,98],85:[2,98],108:[2,98],109:[2,98],110:[2,98],122:[2,98],123:[2,98],124:[2,98],125:[2,98],127:[2,98],128:[2,98],129:[2,98]},{16:[2,99],17:[2,99],28:[2,99],30:[2,99],36:[2,99],53:[2,99],54:[2,99],56:[2,99],69:[2,99],70:[2,99],71:[2,99],74:[2,99],75:[2,99],76:[2,99],77:[2,99],80:[2,99],81:[2,99],82:[2,99],83:[2,99],84:[2,99],85:[2,99],108:[2,99],109:[2,99],110:[2,99],122:[2,99],123:[2,99],124:[2,99],125:[2,99],127:[2,99],128:[2,99],129:[2,99]},{16:[1,191]},{16:[2,74],20:[1,113],22:[2,74],24:[2,74],36:[1,114],38:[2,74],40:[2,74],85:[2,74],86:[2,74],87:[2,74],88:[2,74],89:[2,74],90:[2,74],91:[2,74],92:[2,74],93:[2,74],94:[2,74],95:[2,74],96:[2,74],97:[2,74],98:[2,74],99:[2,74],100:[2,74],101:[2,74],102:[2,74],103:[2,74],104:[2,74],105:[2,74],106:[2,74],107:[2,74],111:[2,74],112:[2,74],113:[2,74],114:[2,74],115:[2,74],116:[2,74],117:[2,74],118:[2,74],119:[2,74],120:[2,74]},{17:[1,22],18:126,25:72,36:[1,70],60:192,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:193,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:194,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:195,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:196,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:197,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:198,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:199,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:200,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:201,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:202,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:203,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:204,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:205,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:206,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:207,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:208,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:209,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:210,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:211,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:212,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,125],22:[2,125],38:[2,125],40:[2,125],85:[2,125],86:[2,125],87:[2,125],88:[2,125],89:[2,125],90:[2,125],91:[2,125],92:[2,125],93:[2,125],94:[2,125],95:[2,125],96:[2,125],97:[2,125],98:[2,125],99:[2,125],100:[2,125],101:[2,125],102:[2,125],103:[2,125],104:[2,125],105:[2,125],106:[2,125],107:[2,125]},{16:[2,126],22:[2,126],38:[2,126],40:[2,126],85:[2,126],86:[2,126],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],94:[2,126],95:[2,126],96:[2,126],97:[2,126],98:[2,126],99:[2,126],100:[2,126],101:[2,126],102:[2,126],103:[2,126],104:[2,126],105:[2,126],106:[2,126],107:[2,126]},{17:[1,22],18:126,25:72,36:[1,70],57:213,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{74:[1,214]},{16:[1,216],17:[1,22],18:126,25:72,36:[1,70],57:215,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],57:217,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:218,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:219,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:220,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:221,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:222,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:223,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:224,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:225,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:226,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],60:227,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{38:[1,228]},{86:[1,229]},{16:[2,127],22:[2,127],38:[2,127],40:[2,127],85:[2,127],86:[2,127],87:[2,127],88:[2,127],89:[2,127],90:[2,127],91:[2,127],92:[2,127],93:[2,127],94:[2,127],95:[2,127],96:[2,127],97:[2,127],98:[2,127],99:[2,127],100:[2,127],101:[2,127],102:[2,127],103:[2,127],104:[2,127],105:[2,127],106:[1,148],107:[1,149]},{16:[2,65],22:[2,65],38:[2,65],40:[2,65],85:[2,65],86:[2,65],87:[2,65],88:[2,65],89:[2,65],90:[2,65],91:[2,65],92:[2,65],93:[2,65],94:[2,65],95:[2,65],96:[2,65],97:[2,65],98:[2,65],99:[2,65],100:[2,65],101:[2,65],102:[2,65],103:[2,65],104:[2,65],105:[2,65],106:[2,65],107:[2,65]},{16:[2,128],22:[2,128],38:[2,128],40:[2,128],85:[2,128],86:[2,128],87:[2,128],88:[2,128],89:[2,128],90:[2,128],91:[2,128],92:[2,128],93:[2,128],94:[2,128],95:[2,128],96:[2,128],97:[2,128],98:[2,128],99:[2,128],100:[2,128],101:[2,128],102:[2,128],103:[2,128],104:[2,128],105:[2,128],106:[2,128],107:[2,128]},{16:[2,74],20:[1,113],22:[2,74],38:[2,74],40:[2,74],85:[2,74],86:[2,74],87:[2,74],88:[2,74],89:[2,74],90:[2,74],91:[2,74],92:[2,74],93:[2,74],94:[2,74],95:[2,74],96:[2,74],97:[2,74],98:[2,74],99:[2,74],100:[2,74],101:[2,74],102:[2,74],103:[2,74],104:[2,74],105:[2,74],106:[2,74],107:[2,74]},{16:[2,129],22:[2,129],38:[2,129],40:[2,129],85:[2,129],86:[2,129],87:[2,129],88:[2,129],89:[2,129],90:[2,129],91:[2,129],92:[2,129],93:[2,129],94:[2,129],95:[2,129],96:[2,129],97:[2,129],98:[2,129],99:[2,129],100:[2,129],101:[2,129],102:[2,129],103:[2,129],104:[2,129],105:[2,129],106:[2,129],107:[2,129]},{16:[1,230]},{16:[1,232],19:[1,231]},{5:[2,16],13:[2,16],16:[2,16],17:[2,16],28:[2,16],30:[2,16],31:[2,16],36:[2,16],44:[2,16],53:[2,16],54:[2,16],56:[2,16],69:[2,16],70:[2,16],74:[2,16],75:[2,16],76:[2,16],77:[2,16],82:[2,16],83:[2,16],84:[2,16],85:[2,16],108:[2,16],109:[2,16],110:[2,16],122:[2,16],123:[2,16],124:[2,16],125:[2,16],127:[2,16],128:[2,16],129:[2,16]},{28:[2,27]},{17:[1,99],39:233},{38:[2,32],40:[2,32]},{5:[2,21],13:[2,21],17:[2,21],31:[2,21]},{17:[2,23],30:[2,23]},{16:[1,234],24:[1,235]},{16:[2,77],17:[2,77],28:[2,77],30:[2,77],36:[2,77],53:[2,77],54:[2,77],56:[2,77],69:[2,77],70:[2,77],71:[2,77],74:[2,77],75:[2,77],76:[2,77],77:[2,77],80:[2,77],81:[2,77],82:[2,77],83:[2,77],84:[2,77],85:[2,77],108:[2,77],109:[2,77],110:[2,77],122:[2,77],123:[2,77],124:[2,77],125:[2,77],127:[2,77],128:[2,77],129:[2,77]},{16:[2,53],17:[2,53],28:[2,53],30:[2,53],36:[2,53],53:[2,53],54:[2,53],56:[2,53],69:[2,53],70:[2,53],71:[2,53],74:[2,53],75:[2,53],76:[2,53],77:[2,53],80:[2,53],81:[2,53],82:[2,53],83:[2,53],84:[2,53],85:[2,53],108:[2,53],109:[2,53],110:[2,53],122:[2,53],123:[2,53],124:[2,53],125:[2,53],127:[2,53],128:[2,53],129:[2,53]},{22:[1,236]},{16:[2,140],22:[2,140],38:[2,140],40:[2,140],85:[2,140],86:[2,140],87:[2,140],88:[2,140],89:[2,140],90:[2,140],91:[2,140],92:[2,140],93:[2,140],94:[2,140],95:[2,140],96:[2,140],97:[2,140],98:[2,140],99:[2,140],100:[2,140],101:[2,140],102:[2,140],103:[2,140],104:[2,140],105:[2,140],106:[2,140],107:[2,140]},{38:[1,237],40:[1,238]},{38:[2,142],40:[2,142]},{16:[2,54],17:[2,54],28:[2,54],30:[2,54],36:[2,54],53:[2,54],54:[2,54],56:[2,54],69:[2,54],70:[2,54],71:[2,54],74:[2,54],75:[2,54],76:[2,54],77:[2,54],80:[2,54],81:[2,54],82:[2,54],83:[2,54],84:[2,54],85:[2,54],108:[2,54],109:[2,54],110:[2,54],122:[2,54],123:[2,54],124:[2,54],125:[2,54],127:[2,54],128:[2,54],129:[2,54]},{21:239,122:[1,95]},{16:[2,56],17:[2,56],28:[2,56],30:[2,56],36:[2,56],53:[2,56],54:[2,56],56:[2,56],69:[2,56],70:[2,56],71:[2,56],74:[2,56],75:[2,56],76:[2,56],77:[2,56],80:[2,56],81:[2,56],82:[2,56],83:[2,56],84:[2,56],85:[2,56],108:[2,56],109:[2,56],110:[2,56],122:[2,56],123:[2,56],124:[2,56],125:[2,56],127:[2,56],128:[2,56],129:[2,56]},{38:[1,240]},{38:[1,241]},{16:[2,100],17:[2,100],28:[2,100],30:[2,100],36:[2,100],53:[2,100],54:[2,100],56:[2,100],69:[2,100],70:[2,100],71:[2,100],74:[2,100],75:[2,100],76:[2,100],77:[2,100],80:[2,100],81:[2,100],82:[2,100],83:[2,100],84:[2,100],85:[2,100],108:[2,100],109:[2,100],110:[2,100],122:[2,100],123:[2,100],124:[2,100],125:[2,100],127:[2,100],128:[2,100],129:[2,100]},{16:[2,104],22:[2,104],38:[2,104],40:[2,104],85:[2,104],86:[2,104],87:[2,104],88:[2,104],89:[1,129],90:[1,130],91:[1,131],92:[2,104],93:[2,104],94:[2,104],95:[2,104],96:[2,104],97:[2,104],98:[2,104],99:[2,104],100:[2,104],101:[2,104],102:[2,104],103:[2,104],104:[2,104],105:[2,104],106:[1,148],107:[1,149]},{16:[2,105],22:[2,105],38:[2,105],40:[2,105],85:[2,105],86:[2,105],87:[2,105],88:[2,105],89:[1,129],90:[1,130],91:[1,131],92:[2,105],93:[2,105],94:[2,105],95:[2,105],96:[2,105],97:[2,105],98:[2,105],99:[2,105],100:[2,105],101:[2,105],102:[2,105],103:[2,105],104:[2,105],105:[2,105],106:[1,148],107:[1,149]},{16:[2,106],22:[2,106],38:[2,106],40:[2,106],85:[2,106],86:[2,106],87:[2,106],88:[2,106],89:[2,106],90:[2,106],91:[2,106],92:[2,106],93:[2,106],94:[2,106],95:[2,106],96:[2,106],97:[2,106],98:[2,106],99:[2,106],100:[2,106],101:[2,106],102:[2,106],103:[2,106],104:[2,106],105:[2,106],106:[1,148],107:[1,149]},{16:[2,107],22:[2,107],38:[2,107],40:[2,107],85:[2,107],86:[2,107],87:[2,107],88:[2,107],89:[2,107],90:[2,107],91:[2,107],92:[2,107],93:[2,107],94:[2,107],95:[2,107],96:[2,107],97:[2,107],98:[2,107],99:[2,107],100:[2,107],101:[2,107],102:[2,107],103:[2,107],104:[2,107],105:[2,107],106:[1,148],107:[1,149]},{16:[2,108],22:[2,108],38:[2,108],40:[2,108],85:[2,108],86:[2,108],87:[2,108],88:[2,108],89:[2,108],90:[2,108],91:[2,108],92:[2,108],93:[2,108],94:[2,108],95:[2,108],96:[2,108],97:[2,108],98:[2,108],99:[2,108],100:[2,108],101:[2,108],102:[2,108],103:[2,108],104:[2,108],105:[2,108],106:[1,148],107:[1,149]},{16:[2,109],22:[2,109],38:[2,109],40:[2,109],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,109],93:[2,109],94:[2,109],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[2,109],104:[2,109],105:[2,109],106:[1,148],107:[1,149]},{16:[2,110],22:[2,110],38:[2,110],40:[2,110],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[2,110],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[2,110],104:[2,110],105:[2,110],106:[1,148],107:[1,149]},{16:[2,111],22:[2,111],38:[2,111],40:[2,111],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[2,111],94:[2,111],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[2,111],104:[2,111],105:[2,111],106:[1,148],107:[1,149]},{16:[2,112],22:[2,112],38:[2,112],40:[2,112],85:[2,112],86:[2,112],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,112],93:[2,112],94:[2,112],95:[2,112],96:[2,112],97:[2,112],98:[2,112],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[2,112],104:[2,112],105:[2,112],106:[1,148],107:[1,149]},{16:[2,113],22:[2,113],38:[2,113],40:[2,113],85:[2,113],86:[2,113],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,113],93:[2,113],94:[2,113],95:[2,113],96:[2,113],97:[2,113],98:[2,113],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[2,113],104:[2,113],105:[2,113],106:[1,148],107:[1,149]},{16:[2,114],22:[2,114],38:[2,114],40:[2,114],85:[2,114],86:[2,114],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,114],93:[2,114],94:[2,114],95:[2,114],96:[2,114],97:[2,114],98:[2,114],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[2,114],104:[2,114],105:[2,114],106:[1,148],107:[1,149]},{16:[2,115],22:[2,115],38:[2,115],40:[2,115],85:[2,115],86:[2,115],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,115],93:[2,115],94:[2,115],95:[2,115],96:[2,115],97:[2,115],98:[2,115],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[2,115],104:[2,115],105:[2,115],106:[1,148],107:[1,149]},{16:[2,116],22:[2,116],38:[2,116],40:[2,116],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,116],93:[2,116],94:[2,116],95:[1,136],96:[1,138],97:[2,116],98:[2,116],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[2,116],104:[2,116],105:[2,116],106:[1,148],107:[1,149]},{16:[2,117],22:[2,117],38:[2,117],40:[2,117],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,117],93:[2,117],94:[2,117],95:[1,136],96:[1,138],97:[2,117],98:[2,117],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[2,117],104:[2,117],105:[2,117],106:[1,148],107:[1,149]},{16:[2,122],22:[2,122],38:[2,122],40:[2,122],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[2,122],104:[2,122],105:[2,122],106:[1,148],107:[1,149]},{16:[2,123],22:[2,123],38:[2,123],40:[2,123],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[2,123],105:[1,143],106:[1,148],107:[1,149]},{16:[2,124],22:[2,124],38:[2,124],40:[2,124],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[2,124],105:[2,124],106:[1,148],107:[1,149]},{16:[2,118],22:[2,118],38:[2,118],40:[2,118],85:[2,118],86:[2,118],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,118],93:[2,118],94:[2,118],95:[2,118],96:[2,118],97:[2,118],98:[2,118],99:[2,118],100:[2,118],101:[2,118],102:[2,118],103:[2,118],104:[2,118],105:[2,118],106:[1,148],107:[1,149]},{16:[2,119],22:[2,119],38:[2,119],40:[2,119],85:[2,119],86:[2,119],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,119],93:[2,119],94:[2,119],95:[2,119],96:[2,119],97:[2,119],98:[2,119],99:[2,119],100:[2,119],101:[2,119],102:[2,119],103:[2,119],104:[2,119],105:[2,119],106:[1,148],107:[1,149]},{16:[2,120],22:[2,120],38:[2,120],40:[2,120],85:[2,120],86:[2,120],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,120],93:[2,120],94:[2,120],95:[2,120],96:[2,120],97:[2,120],98:[2,120],99:[2,120],100:[2,120],101:[2,120],102:[2,120],103:[2,120],104:[2,120],105:[2,120],106:[1,148],107:[1,149]},{16:[2,121],22:[2,121],38:[2,121],40:[2,121],85:[2,121],86:[2,121],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[2,121],93:[2,121],94:[2,121],95:[2,121],96:[2,121],97:[2,121],98:[2,121],99:[2,121],100:[2,121],101:[2,121],102:[2,121],103:[2,121],104:[2,121],105:[2,121],106:[1,148],107:[1,149]},{38:[1,242]},{36:[1,243]},{16:[1,244]},{16:[1,246],17:[1,22],18:126,25:72,36:[1,70],57:245,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,73],22:[2,73],38:[2,73],40:[2,73]},{16:[2,130],22:[2,130],38:[2,130],40:[2,130],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{16:[2,131],22:[2,131],38:[2,131],40:[2,131],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{16:[2,132],22:[2,132],38:[2,132],40:[2,132],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{16:[2,133],22:[2,133],38:[2,133],40:[2,133],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{16:[2,134],22:[2,134],38:[2,134],40:[2,134],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{16:[2,135],22:[2,135],38:[2,135],40:[2,135],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{16:[2,136],22:[2,136],38:[2,136],40:[2,136],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{16:[2,137],22:[2,137],38:[2,137],40:[2,137],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{16:[2,138],22:[2,138],38:[2,138],40:[2,138],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{16:[2,139],22:[2,139],38:[2,139],40:[2,139],85:[1,135],86:[1,137],87:[1,127],88:[1,128],89:[1,129],90:[1,130],91:[1,131],92:[1,132],93:[1,133],94:[1,134],95:[1,136],96:[1,138],97:[1,139],98:[1,140],99:[1,144],100:[1,145],101:[1,146],102:[1,147],103:[1,141],104:[1,142],105:[1,143],106:[1,148],107:[1,149]},{16:[2,62],22:[2,62],38:[2,62],40:[2,62],85:[2,62],86:[2,62],87:[2,62],88:[2,62],89:[2,62],90:[2,62],91:[2,62],92:[2,62],93:[2,62],94:[2,62],95:[2,62],96:[2,62],97:[2,62],98:[2,62],99:[2,62],100:[2,62],101:[2,62],102:[2,62],103:[2,62],104:[2,62],105:[2,62],106:[2,62],107:[2,62]},{17:[1,22],18:126,25:72,36:[1,70],60:247,61:71,62:167,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{5:[2,11],13:[2,11],17:[2,11],31:[2,11]},{16:[1,248]},{5:[2,18],13:[2,18],16:[2,18],17:[2,18],28:[2,18],30:[2,18],31:[2,18],36:[2,18],44:[2,18],53:[2,18],54:[2,18],56:[2,18],69:[2,18],70:[2,18],74:[2,18],75:[2,18],76:[2,18],77:[2,18],82:[2,18],83:[2,18],84:[2,18],85:[2,18],108:[2,18],109:[2,18],110:[2,18],122:[2,18],123:[2,18],124:[2,18],125:[2,18],127:[2,18],128:[2,18],129:[2,18]},{38:[2,30],40:[2,30]},{17:[2,24],30:[2,24]},{25:249,122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,75],22:[2,75],24:[2,75],38:[2,75],40:[2,75],85:[2,75],86:[2,75],87:[2,75],88:[2,75],89:[2,75],90:[2,75],91:[2,75],92:[2,75],93:[2,75],94:[2,75],95:[2,75],96:[2,75],97:[2,75],98:[2,75],99:[2,75],100:[2,75],101:[2,75],102:[2,75],103:[2,75],104:[2,75],105:[2,75],106:[2,75],107:[2,75],111:[2,75],112:[2,75],113:[2,75],114:[2,75],115:[2,75],116:[2,75],117:[2,75],118:[2,75],119:[2,75],120:[2,75]},{16:[2,141],22:[2,141],38:[2,141],40:[2,141],85:[2,141],86:[2,141],87:[2,141],88:[2,141],89:[2,141],90:[2,141],91:[2,141],92:[2,141],93:[2,141],94:[2,141],95:[2,141],96:[2,141],97:[2,141],98:[2,141],99:[2,141],100:[2,141],101:[2,141],102:[2,141],103:[2,141],104:[2,141],105:[2,141],106:[2,141],107:[2,141]},{17:[1,22],18:126,25:72,36:[1,70],57:250,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{22:[1,251]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:252,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{28:[1,253]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:254,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],57:255,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[1,257],17:[1,22],18:126,25:72,36:[1,70],57:256,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[1,258]},{17:[1,22],18:126,25:72,36:[1,70],38:[1,260],57:259,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,103],22:[2,103],38:[2,103],40:[2,103],85:[2,103],86:[2,103],87:[2,103],88:[2,103],89:[2,103],90:[2,103],91:[2,103],92:[2,103],93:[2,103],94:[2,103],95:[2,103],96:[2,103],97:[2,103],98:[2,103],99:[2,103],100:[2,103],101:[2,103],102:[2,103],103:[2,103],104:[2,103],105:[2,103],106:[1,148],107:[1,149]},{5:[2,13],13:[2,13],17:[2,13],31:[2,13]},{16:[1,261]},{38:[2,143],40:[2,143]},{16:[1,232]},{16:[2,76],17:[2,76],28:[2,76],30:[2,76],36:[2,76],53:[2,76],54:[2,76],56:[2,76],69:[2,76],70:[2,76],71:[2,76],74:[2,76],75:[2,76],76:[2,76],77:[2,76],80:[2,76],81:[2,76],82:[2,76],83:[2,76],84:[2,76],85:[2,76],108:[2,76],109:[2,76],110:[2,76],122:[2,76],123:[2,76],124:[2,76],125:[2,76],127:[2,76],128:[2,76],129:[2,76]},{78:262,79:263,80:[1,264],81:[1,265]},{16:[2,80],17:[2,80],28:[2,80],30:[2,80],36:[2,80],53:[2,80],54:[2,80],56:[2,80],69:[2,80],70:[2,80],71:[2,80],74:[2,80],75:[2,80],76:[2,80],77:[2,80],80:[2,80],81:[2,80],82:[2,80],83:[2,80],84:[2,80],85:[2,80],108:[2,80],109:[2,80],110:[2,80],122:[2,80],123:[2,80],124:[2,80],125:[2,80],127:[2,80],128:[2,80],129:[2,80]},{38:[1,266]},{16:[1,267]},{17:[1,22],18:126,25:72,36:[1,70],38:[1,269],57:268,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[1,22],18:126,25:72,36:[1,70],38:[1,271],57:270,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{38:[1,272]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:273,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{17:[2,25],30:[2,25]},{30:[1,274],79:275,80:[1,264],81:[1,265]},{30:[2,91],80:[2,91],81:[2,91]},{21:276,122:[1,95]},{55:[1,277]},{16:[1,278]},{17:[1,22],18:126,25:72,36:[1,70],38:[1,280],57:279,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{38:[1,281]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:282,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{38:[1,283]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:284,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:285,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,89],17:[2,89],28:[2,89],30:[2,89],36:[2,89],53:[2,89],54:[2,89],56:[2,89],69:[2,89],70:[2,89],71:[2,89],74:[2,89],75:[2,89],76:[2,89],77:[2,89],80:[2,89],81:[2,89],82:[2,89],83:[2,89],84:[2,89],85:[2,89],108:[2,89],109:[2,89],110:[2,89],122:[2,89],123:[2,89],124:[2,89],125:[2,89],127:[2,89],128:[2,89],129:[2,89]},{16:[2,90],17:[2,90],28:[2,90],30:[2,90],36:[2,90],53:[2,90],54:[2,90],56:[2,90],69:[2,90],70:[2,90],71:[2,90],74:[2,90],75:[2,90],76:[2,90],77:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90],108:[2,90],109:[2,90],110:[2,90],122:[2,90],123:[2,90],124:[2,90],125:[2,90],127:[2,90],128:[2,90],129:[2,90]},{30:[2,92],80:[2,92],81:[2,92]},{55:[1,286]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],30:[2,96],36:[1,70],42:287,46:37,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],80:[2,96],81:[2,96],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,81],17:[2,81],28:[2,81],30:[2,81],36:[2,81],53:[2,81],54:[2,81],56:[2,81],69:[2,81],70:[2,81],71:[2,81],74:[2,81],75:[2,81],76:[2,81],77:[2,81],80:[2,81],81:[2,81],82:[2,81],83:[2,81],84:[2,81],85:[2,81],108:[2,81],109:[2,81],110:[2,81],122:[2,81],123:[2,81],124:[2,81],125:[2,81],127:[2,81],128:[2,81],129:[2,81]},{38:[1,288]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:289,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:290,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,86],17:[2,86],28:[2,86],30:[2,86],36:[2,86],53:[2,86],54:[2,86],56:[2,86],69:[2,86],70:[2,86],71:[2,86],74:[2,86],75:[2,86],76:[2,86],77:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86],108:[2,86],109:[2,86],110:[2,86],122:[2,86],123:[2,86],124:[2,86],125:[2,86],127:[2,86],128:[2,86],129:[2,86]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:291,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,87],17:[2,87],28:[2,87],30:[2,87],36:[2,87],53:[2,87],54:[2,87],56:[2,87],69:[2,87],70:[2,87],71:[2,87],74:[2,87],75:[2,87],76:[2,87],77:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87],108:[2,87],109:[2,87],110:[2,87],122:[2,87],123:[2,87],124:[2,87],125:[2,87],127:[2,87],128:[2,87],129:[2,87]},{16:[2,88],17:[2,88],28:[2,88],30:[2,88],36:[2,88],53:[2,88],54:[2,88],56:[2,88],69:[2,88],70:[2,88],71:[2,88],74:[2,88],75:[2,88],76:[2,88],77:[2,88],80:[2,88],81:[2,88],82:[2,88],83:[2,88],84:[2,88],85:[2,88],108:[2,88],109:[2,88],110:[2,88],122:[2,88],123:[2,88],124:[2,88],125:[2,88],127:[2,88],128:[2,88],129:[2,88]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],30:[2,94],36:[1,70],42:292,46:37,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],80:[2,94],81:[2,94],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],30:[2,95],36:[1,70],46:107,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],80:[2,95],81:[2,95],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],36:[1,70],46:293,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,85],17:[2,85],28:[2,85],30:[2,85],36:[2,85],53:[2,85],54:[2,85],56:[2,85],69:[2,85],70:[2,85],71:[2,85],74:[2,85],75:[2,85],76:[2,85],77:[2,85],80:[2,85],81:[2,85],82:[2,85],83:[2,85],84:[2,85],85:[2,85],108:[2,85],109:[2,85],110:[2,85],122:[2,85],123:[2,85],124:[2,85],125:[2,85],127:[2,85],128:[2,85],129:[2,85]},{16:[2,84],17:[2,84],28:[2,84],30:[2,84],36:[2,84],53:[2,84],54:[2,84],56:[2,84],69:[2,84],70:[2,84],71:[2,84],74:[2,84],75:[2,84],76:[2,84],77:[2,84],80:[2,84],81:[2,84],82:[2,84],83:[2,84],84:[2,84],85:[2,84],108:[2,84],109:[2,84],110:[2,84],122:[2,84],123:[2,84],124:[2,84],125:[2,84],127:[2,84],128:[2,84],129:[2,84]},{16:[2,83],17:[2,83],28:[2,83],30:[2,83],36:[2,83],53:[2,83],54:[2,83],56:[2,83],69:[2,83],70:[2,83],71:[2,83],74:[2,83],75:[2,83],76:[2,83],77:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83],108:[2,83],109:[2,83],110:[2,83],122:[2,83],123:[2,83],124:[2,83],125:[2,83],127:[2,83],128:[2,83],129:[2,83]},{16:[1,51],17:[1,22],18:49,25:72,28:[1,54],30:[2,93],36:[1,70],46:107,47:41,48:42,49:43,50:44,51:45,52:46,53:[1,47],54:[1,48],56:[1,50],57:55,58:63,59:64,60:65,61:71,62:69,63:73,64:74,65:75,66:76,67:77,68:78,69:[1,79],70:[1,56],72:58,73:59,74:[1,66],75:[1,67],76:[1,68],77:[1,57],80:[2,93],81:[2,93],82:[1,60],83:[1,61],84:[1,62],85:[1,80],108:[1,87],109:[1,88],110:[1,89],122:[1,81],123:[1,82],124:[1,83],125:[1,84],126:85,127:[1,86],128:[1,90],129:[1,91]},{16:[2,82],17:[2,82],28:[2,82],30:[2,82],36:[2,82],53:[2,82],54:[2,82],56:[2,82],69:[2,82],70:[2,82],71:[2,82],74:[2,82],75:[2,82],76:[2,82],77:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82],108:[2,82],109:[2,82],110:[2,82],122:[2,82],123:[2,82],124:[2,82],125:[2,82],127:[2,82],128:[2,82],129:[2,82]}],
defaultActions: {3:[2,2],17:[2,26],18:[2,28],19:[2,1],103:[2,102],174:[2,27]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function error(str, loc) {
	if(loc)
		throw new Error("Parse error on line " + loc.first_line + ": " + str);
	else
		throw new Error("Parse error: " + str);
}

//
// Label
//
var label_counter = 466560;

function generateLabel() {
	return (label_counter++).toString(36);
}

//
// Type stuff
//
function normalizeType(type) {
	var aliases = {
		"bool":  "bit",
		"short": "byte",
		"dint":  "long"
	};
	
	return aliases[type] || type;
}

function typeWidth(type) {
	switch(type) {
		case "bit":
			return 0;
			
		case "byte":
			return 1;
		
		case "word":
		case "int":
			return 2;
			
		case "dword":
		case "longlong":
		case "real": return 4;
		
		default:
			throw new Error("Unknown type: " + type);
	}
}

function typeToLIST(type) {
	switch(type) {
		case "bit":
			return "BOOL";
			
		case "long":
			return "DINT";
		
		case "void":
		case "byte":
		case "word":
		case "int":
		case "dword":
		case "real":
			return type.toUpperCase();
		
		default:
			throw new Error("Unable to convert type to LIST: " + type);
	}
}

function castValue(value, type) {
	function err() {
		throw new Error("Cannot convert type '" + value.type + "' to '" + type + "'");
	}
	
	var typeCast = {
		"bit":   "boolean",
		"byte":  "integer",
		"word":  "integer",
		"int":   "integer",
		"dword": "integer",
		"long":  "integer",
		"real":  "real",
	};
	
	value.c_type = type;
	type = typeCast[type] || err();
	
	if(value.type === type) {
		return value;
	}

	return {
		$: "value",
		type: type,
		value: (function(val) {
			switch(type) {
				case "boolean":
					switch(value.type) {
						case "real":
						case "integer": return val ? true : false;
						default: err();
					}
				
				case "integer":
					switch(value.type) {
						case "boolean": return val ? 1 : 0;
						case "real":    return Math.floor(val);
						default: err();
					}
				
				case "real":
					switch(value.type) {
						case "boolean": return val ? 1 : 0;
						case "integer": return val;
						default: err();
					}
					
				default: err();
			}
		})(value.value)
	};
}

function compileValue(value, type) {
	function err() {
		throw new Error("Cannot compile '" + JSON.stringify(value) + "' to '" + type + "'");
	}
	
	switch(value.$) {
		case "value":
			val = castValue(value, type).value;
			return compileRawValue(val, type);
			break;
			
		default:
			throw new Error("Invalid value type: " + value.$);
	}
}

function compileRawValue(value, type) {
	function err() {
		throw new Error("Cannot compile '" + value + "' to '" + type + "'");
	}
	
	switch(type) {
		case "bit":  return value ? "TRUE" : "FALSE";
		case "byte": return "B#16#" + value.toString(16).toUpperCase();
		case "word": return "W#16#" + value.toString(16).toUpperCase();
		case "int":  return value.toString();
		case "dword": return "DW#16#" + value.toString(16).toUpperCase();
		case "long":  return "L#" + value.toString();
		case "real":  return value.toExponential();
		default: err();
	}
}

function dynCast(expr, type, _) {
	if(expr.$ === "value")
		return castValue(expr, type);
	
	if(expr.type === type) {
		return expr;
	} else if(expr.$ === "cast" || expr.type === "polymorphic") {
		expr.type = type;
		return expr;
	} else {
		return { $: "cast", type: type, expr: expr };
	}
}

function resolveType(sym, _) {
	if(sym.type) {
		return sym.type;
	}
	
	if(func_buf.scope[sym]) {
		return func_buf.scope[sym].type;
	}
	
	return getSymbol(sym, _).type;
}

//
// Memory management
//
var memorymap = [];

function registerMemoryBytes(byte, width) {
	for(var i = width; i > 0; i--, byte++) {
        if(memorymap[byte])
            error("Memory overlay detected at offset " + byte);
		memorymap[byte] = 0xFF;
	}
}

function registerMemoryBit(byte, offset) {
	memorymap[byte] = (memorymap[byte] | 0) | (1 << offset);
}

function allocMemory(width) {
	var offset = -1;
	
	for(var i = memorymap.length - 1; i >= 0; --i) {
		var free = true;
		
		for(var j = i; j-i < width; ++j) {
			if(memorymap[j]) {
				free = false;
				break;
			}
		}
		
		if(free) {
			offset = i;
			break;
		}
	}
	
	if(offset < 0)
		offset = memorymap.length;
		
	for(var i = 0; i < width; ++i)
		memorymap[offset + i] = 255;
	
	return offset;
}

var alloc_bit_byte = null;
var alloc_bit_offset = 0;

function allocBit() {
	if(alloc_bit_byte === null || alloc_bit_offset > 7) {
		alloc_bit_byte = allocMemory(1);
		alloc_bit_offset = 0;
	}
	
	return alloc_bit_byte + "." + (alloc_bit_offset++);
}

var array_ptr_addr = "MD " + allocMemory(4);
var array_buf_addr = "MD " + allocMemory(4);

function arrayDereference(push, ref, wrap, _) {
	var def = fnScopeResolve(ref.ref);
	
	if(wrap)
		push("T " + array_buf_addr);
	
	if(ref.index.type == "integer") {
		var idx = ref.index.value;
		if(idx == 0) {
			push("L P#" + def.offset + ".0");
		} else {
			var base_offset = parseInt(def.offset);
			if(def.twidth > 0) {
				push("L P#" + (base_offset + (idx * def.twidth)) + ".0");
			} else {
				var offset = Math.floor(idx / 8);
				var sub_offset = idx % 8;
				push("L P#" + (base_offset + offset) + "." + sub_offset);
			}
		}
	} else {
		push(compileExpr(dynCast(ref.index, "word", _), _));
		if(def.twidth > 0) {
			switch(def.twidth) {
				case 2:
					push("SLW 4");
					break;
					
				default:
					push("L " + def.twidth);
					push("*I");
			
				case 1:
					push("SLW 3");
					break;
			}
		}
		push("L P#" + def.offset + ".0");
		push("+D")
	}
	
	push("T " + array_ptr_addr);
	
	if(wrap)
		push("L " + array_buf_addr);
	
	var address_class;
	switch(ref.type) {
		case "bit":
			address_class = "M";
			break;
		
		case "byte":
			address_class = "MB";
			break;
			
		case "word":
		case "int":
			address_class = "MW";
			break;
			
		case "dword":
		case "long":
		case "real":
			address_class = "MD";
			break;
	}
	
	return address_class + " [" + array_ptr_addr + "]";
}

//
// Symbols
//
var symbols = {};
var force_symbol = false;

function registerSymbol(name, sym, _) {
	if(name[0] == "$" && !force_symbol)
		error("reserved symbol '" + name + "'", _);
	if(symbols[name])
		error("duplicate symbol '" + name + "'", _);
	symbols[name] = sym;
}

function getSymbol(name, _) {
	if(!symbols[name])
		error("undefined symbol '" + name + "'", _);
	return symbols[name];
}

//
// Externals
//
function dissectBinding(binding) {
	binding    = binding.replace(/^\@\s*/, "");
	var type   = binding[0];
	var width  = binding[1];
	var addr   = binding.slice(2);
	var suffix = width;
	
	switch(width) {
		case "B": width = 1; break;
		case "W": width = 2; break;
		case "D": width = 4; break;
		default:
			suffix = "";
			addr = width + addr;
			width = 0;
	}
	
	return {
		type:     type,
		fulltype: type + suffix,
		width:    width,
		addr:     addr
	};
}

function registerExternal(type, name, binding, _) {
	binding = dissectBinding(binding);
	if(binding.width != typeWidth(type))
		error("binding type width mismatch", _);
		
	if(binding.type === "M") {
		if(binding.width) {
			registerMemoryBytes(Number(binding.addr), binding.width);
		} else {
			var addr = binding.addr.split(".");
			registerMemoryBit(Number(addr[0]), Number(addr[1]));
		}
	}
	
	registerSymbol(name, {
		$:       "external",
		type:    type,
		addr:    binding.fulltype + " " + binding.addr,
		binding: binding
	}, _);
}

function registerExternalArray(type, name, length, binding, _) {
	binding = dissectBinding(binding);
	
	if(binding.type != "M") {
		error("Arrays must be bound to memory addresses", _);
	}
	
	if(length < 0) {
		error("Zero-sized array are not allowed", _);
	}
	
	var twidth = typeWidth(type);
	var alloc_length = twidth ? twidth * length : Math.floor((length - 1) / 8) + 1;
	registerMemoryBytes(parseInt(binding.addr), alloc_length);
	
	if(!twidth && binding.addr.split(".")[1] !== "0") {
		error("External bit arrays must be byte-aligned", _);
	}
	
	registerSymbol(name, {
		$:       "external-array",
		type:    type,
		length:  length,
		twidth:  twidth,
		offset:  binding.addr.split(".")[0]
	}, _);
}

//
// DB
//
var dbs = [];

function Datablock() {
	this.id = dbs.push(this);
	this.memory = [];
	this.map = {};
	this.entries = null;
}

Datablock.prototype.compile = function() {
	var entries = this.entries = [];
	this.memory.forEach(function(block) {
		switch(block.$) {
			case "unit":
				entries.push(block.entry);
				break;
			
			case "bits":
				block.bits.forEach(function(bit) {
					entries.push(bit);
				});
				break;
			
			case "padding":
				break;
			
			default:
				throw new Error("Unknown block type: " + block.$);
		}
	});
};

Datablock.prototype.register = function(name, type, def, _) {
	var entry = {
		name:        name,
		type:        type,
		width:       typeWidth(type),
		def:         def || { $: "value", type: "integer", value: 0 },
		offset:      0,
		bit_offset:  0,
	};
	
	if(this.map[name])
		error("Duplicate datablock entry name: " + name, _);
	this.map[name] = entry;
	
	(function(self) {
		switch(entry.width) {
			case 0:
				for(var i = self.memory.length - 1; i >= 0; --i) {
					var block = self.memory[i];
					if(block && block.$ == "bits" && block.bits.length < 8) {
						entry.offset = i;
						entry.bit_offset = block.bits.push(entry) - 1;
						return;
					}
				}
				
				var unit = { $: "bits", bits: [entry] };
				// no break
			
			case 1:
				if(entry.width == 1)
					var unit = { $: "unit", entry: entry };
				
				for(var i = self.memory.length - 1; i >= 0; --i) {
					if(!self.memory[i]) {
						entry.offset = i;
						self.memory[i] = unit;
						return;
					}
				}
				
				entry.offset = self.memory.push(unit) - 1;
				return;
			
			default:
				entry.offset = self.memory.length + (self.memory.length % 2);
				self.memory[entry.offset] = { $: "unit", entry: entry };
				for(var i = entry.offset + 1; i < (entry.offset + entry.width); ++i) {
					self.memory[i] = { $: "padding" };
				}
		}
	})(this);
	
	switch(entry.width) {
		case 0:
			entry.addr = "DB" + this.id + ".DBX " + entry.offset + "." + entry.bit_offset;
			break;
		
		case 1:
			entry.addr = "DB" + this.id + ".DBB " + entry.offset;
			break;
		
		case 2:
			entry.addr = "DB" + this.id + ".DBW " + entry.offset;
			break;
		
		case 4:
			entry.addr = "DB" + this.id + ".DBD " + entry.offset;
			break;
		
		default:
			throw new Error("Cannot address a " + entry.width + "-bytes object");
	}
	
	return entry;
};

Datablock.prototype.get = function(name, _) {
	if(this.map[name])
		return this.map[name];
	error("Unknown datablock entry: " + name, _);
};

Datablock.prototype.generate = function() {
	if(!this.entries)
		this.compile();
	
	var buffer = [];
	buffer.push("DATA_BLOCK DB " + this.id + "\n");
	buffer.push("  STRUCT\n");
	this.entries.forEach(function(entry, i) {
		buffer.push("   _" + i.toString(36).toUpperCase() + " : " + typeToLIST(entry.type));
		buffer.push(" ;\t// (" + entry.addr + ", " + entry.name + ")\n");
	});
	buffer.push("  END_STRUCT\n");
	buffer.push("BEGIN\n");
	this.entries.forEach(function(entry, i) {
		buffer.push("   _" + i.toString(36).toUpperCase() + " := " + compileValue(entry.def, entry.type) + " ;\n");
	});
	buffer.push("END_DATA_BLOCK\n\n");
	console.log(buffer.join(""));
}

function generateDbs() {
	dbs.forEach(function(db) { db.generate(); });
}

//
// Variables
//
var globals_db;

function registerGlobal(type, name, def, _) {
	if(!globals_db)
		globals_db = new Datablock;
	
	var entry = globals_db.register(name, type, def, _);
	
	registerSymbol(name, {
		$: "variable",
		type: type,
		addr: entry.addr,
		entry: entry
	}, _);
}

function getGlobal(name, _) {
	if(!globals_db)
		error("Globals datablock not defined.", _);
	return globals_db.get(name);
}

//
// Functions
//
var funcs = {};
var funcs_list = [];
var main_func = null;

var func_buf = null;

function fnScopeAdd(name, obj, _) {
	if(name[0] == "$")
		error("reserved symbol '" + name + "'", _);
		
	if(func_buf.scope[name]) {
		error("duplicate local symbol '" + name + "'", _);
	}
	
	if(!obj.addr)
		obj.addr = "#_" + Number(func_buf.scope_ctn++).toString(36);
	
	func_buf.scope[name] = obj;
}

function fnScopeResolve(name, _) {
	if(name === "RET_VAL")
		return {
			addr: "#" + name
		};
	
	if(func_buf.scope[name])
		return func_buf.scope[name];
	
	return getSymbol(name, _);
}

function fnBegin(definition, _) {
	func_buf = {
		type: definition.type,
		name: definition.name,
		id: "FC " + (funcs_list.length + 1),
		args: definition.args,
		body: "",
		scope_ctn: 0,
		scope: {},
		labels: {}
	};
	
	if(definition.name !== "MAIN") {
		registerSymbol(definition.name, {
			$: "function",
			type: definition.type,
			id: func_buf.id,
			entry: func_buf
		}, _);
	}
	
	definition.args.forEach(function(arg) {
		fnScopeAdd(arg.name, {
			$: "argument",
			type: arg.type,
			name: arg.name
		}, _);
	});
}

function fnDeclareVariable(type, name, def, isStatic, _) {
	var obj = {
		$: "variable",
		type: type,
		name: name,
		globals: isStatic
	};
	
	fnScopeAdd(name, obj, _);
	
	if(isStatic) {
		var global_name = func_buf.name + ":" + name;
		registerGlobal(type, global_name, def, _);
		obj.addr = getGlobal(global_name).addr;
	} else if(def) {
		func_buf.body += compileExpr({
			$: "assign",
			type: type,
			to: { $: "ref", type: type, ref: name },
			expr: dynCast(def, type, _)
		}, _) + "\n";
	}
}

function fnEnd(body) {
	func_buf.body += body;
	delete func_buf.scope_ctn;
	
	if(func_buf.name === "MAIN") {
		main_func = func_buf;
	} else {
		funcs[func_buf.name] = func_buf;
		funcs_list.push(func_buf);
	}
	
	func_buf = null;
}

function fnCompile(fn) {
	var buffer = [];
	var main_fn = (fn.name === "MAIN");
	
	if(main_fn) {
		buffer.push("ORGANIZATION_BLOCK OB 1\n");
	} else {
		buffer.push("FUNCTION " + fn.id + " : ");
		buffer.push(typeToLIST(fn.type) + "\n");
		if(!/\$/.test(fn.name))
			buffer.push("TITLE = " + fn.name + "\n");
	}
	
	// Dispatch scope symbols
	var args = [];
	var locals = [];
	
	for(var name in fn.scope) {
		var sym = fn.scope[name];
		switch(sym.$) {
			case "argument":
				args.push(sym);
				break;
				
			case "variable":
				if(!sym.globals)
					locals.push(sym);
				break;
				
			case "array": break;
			
			default: throw new Error("Unknown local symbol type: " + sym.$);
		}
	}
	
	// Args
	if(args.length) {
		buffer.push("VAR_INPUT\n");
		args.forEach(function(arg) {
			buffer.push("  " + arg.addr.slice(1) + " : ");
			buffer.push(typeToLIST(arg.type) + " ;\t");
			buffer.push("// (" + arg.name + ")\n");
		});
		buffer.push("END_VAR\n");
	}
	
	// Locals
	if(locals.length || main_fn) {
		buffer.push("VAR_TEMP\n");
		if(main_fn)
			buffer.push("  Default : ARRAY  [1 .. 20] OF BYTE ;\n");
		locals.forEach(function(local) {
			buffer.push("  " + local.addr.slice(1) + " : ");
			buffer.push(typeToLIST(local.type) + " ;\t");
			buffer.push("// (" + local.name + ")\n");
		});
		buffer.push("END_VAR\n");
	}
	
	buffer.push("BEGIN\n");
	var end_label = generateLabel();
	
	fn.body = fn.body
		.replace(/^(\s+)(.*)$/mg, "$2")
		.replace(/^\s*?\n/mg, "")
		.replace(/(\s+)$/, "")
		.replace(/\$return$/mg, "BEU")
		.replace(/\$goto\:([a-zA-Z0-9_]+)$/mg, function(_, label) {
			if(!fn.labels[label])
				throw new Error("Undefined label '" + label + "' in function '" + fn.name + "'");
			return "JU " + fn.labels[label];
		});
	
	var matches = fn.body.match(/^\$([a-z]+)|[^$]\$([a-z]+)/);
	if(matches)
		throw new Error("Incorrect usage of keyword '" + (matches[1] || matches[2]) + "' in function '" + fn.name + "'");
	
	fnOptimize(fn);
	
	fn.body = fn.body
		.replace(/(.)$/mg, "$1;")
		.replace(/^/mg, "        ")
		.replace(/^ +([a-z0-9]{4}:)/mg, "  $1");
	
	buffer.push(fn.body);
	buffer.push("\n");
	if(main_fn) {
		buffer.push("END_ORGANIZATION_BLOCK");
	} else {
		buffer.push("END_FUNCTION");
	}
	return buffer.join("");
}

function fnOptimize(fn) {
	//return;
	
	function RE(expr) {
		return new RegExp(expr, "g");
	}

	var queue = [];
	var transforms = [
		[ /^([a-z0-9]{4}): NOP 0\n([a-z0-9]{4}):/mg,
			function(_, label1, label2) {
				queue.push([RE(label1), label2]);
				return label2 + ":";
			}],
		/*[ /^([a-z0-9]{4}): JU ([a-z0-9]{4})\n/mg,
			function(_, label1, label2) {
				queue.push([RE(label1), label2]);
				return "";
			}],*/
		[ /^([a-z0-9]{4}: )NOP 0\n(([^:\s]+)(\s+.*))?$/mg, "$1$2" ],
		[ /^([a-z0-9]{4}): /mg,
			function(match, label) {
				if(!RE(".+? " + label).test(fn.body))
					return "";
				else
					return match;
			}],
		[ /^(JU|JCN) ([a-z0-9]{4})\n(\2:)/mg, "$3" ],
		[ /^TAK\n([*+][IDR]|[AOX][WD])$/mg, "$1" ],
		[ /^NOT\nJCN (.{4})\nJU (.{4})$/mg, "JCN $2\nJU $1" ],
		[ /^NOT\nJCN /mg, "JC " ],
		[ /([AOX])\(\n\1 (.*)\nNOT\n\)$/mg, "$1N $2" ],
		[ /([AOX])\((\n([^)].*\n)+?)NOT\n\)$/mg, "$1N($2)" ],
		[ /([AOX])\(\n((\1 .*\n)+)\)\n/mg, "$2" ],
		[ /([AOX]N?)\(\nA (.*)\n\)/mg, "$1 $2" ],
		[ /A\(\n(A .*\nF[NP] .*)\n\)/mg, "$1" ],
		[ /T MD 4\n(L P\#.*\nT MD 0\n)L MD 4$/mg, "$1TAK" ],
		[ /^NOP 0|\nNOP 0/g, "" ],
		[ /^([a-z0-9]{4}: )(\/\/.*)$/mg, "$1NOP 0\n$2" ],
		[ /\nBEU$/g, "" ]
	];
	
	function apply(t) {
		fn.body = fn.body.replace(t[0], t[1]);
	}
	
	var old_body;
	do {
		old_body = fn.body;
		transforms.forEach(function(t) {
			apply(t);
			if(queue.length) {
				while(t = queue.shift())
					apply(t);
			}
		});
	} while(old_body !== fn.body);
}

function generateFns() {
	funcs_list.push(main_func);
	
	var fns_buffer = [];
	funcs_list.forEach(function(fn) {
		fns_buffer.push(fnCompile(fn));
	});
	
	console.log(fns_buffer.join("\n\n\n"));
}

//
// Expressions
//
var ir_buffers = {};

function requestIRBuf(type) {
	for(var i = 1; i < 10; ++i) {
		var name = "IR$" + i;
		if(!func_buf.scope[name])
				fnDeclareVariable("dword", name, null, false);
		var addr = func_buf.scope[name].addr;
		if(!ir_buffers[addr])
			return ir_buffers[addr] = addr;
	}
	
	throw new Error("IR-buffer usage overflow");
}

function releaseIRBuf(buf) {
	delete ir_buffers[buf];
}

// Builtins
var builtins = (function() {
	function math_op(op) {
		return ["real", function(push, args, _) {
			push(compileExpr(dynCast(args[0], "real", _), _));
			push(op);
		}];
	}
	
	function validate_timer(timer, _) {
		if(timer.type != "integer" || timer.value < 1 || timer.value > 9)
			error("Invalid delay register: " + timer.value, _);
	}
	
	function delay_op(op) {
		return ["bit", function(push, args, _) {
			if(args[2].type != "string" || !args[2].value.match(/^S5T#.*$/))
				error("Invalid delay duration: " + args[2].value, _);
			validate_timer(args[1], _);
				
			push(compileExpr(dynCast(args[0], "bit", _), _));
			push("L " + args[2].value);
			push(op + " T " + args[1].value);
			push("A T " + args[1].value);
		}];
	}

	return {
		"$ABS": math_op("ABS"),
		"$SQR": math_op("SQR"),
		"$SQRT": math_op("SQRT"),
		"$EXP": math_op("EXP"),
		"$LN": math_op("LN"),
		"$SIN": math_op("SIN"),
		"$COS": math_op("COS"),
		"$TAN": math_op("TAN"),
		"$ASIN": math_op("ASIN"),
		"$ACOS": math_op("ACOS"),
		"$ATAN": math_op("ATAN"),
		"$ONDELAY": delay_op("SD"),
		"$OFFDELAY": delay_op("SF"),
		"$PULSEDELAY": delay_op("SP"),
		"$CLRDELAY": ["void", function(push, args, _) {
			validate_timer(args[0], _);
			push("FR T " + args[0].value);
		}],
		"$GETDELAY": ["bit", function(push, args, _) {
			validate_timer(args[0], _);
			push("A T " + args[0].value);
		}],
		"$READDELAY": ["int", function(push, args, _) {
			validate_timer(args[0], _);
			push("L T " + args[0].value);
		}]
	};
})();

function compileExpr(expr, _) {
	var buffer = [];
	
	function done(last) {
		if(last)
			buffer.push(last);
		return buffer.join("\n");
	}
	
	function push(line) {
		buffer.push(line);
	}
	
	switch(expr.$) {
		case "value":
			switch(expr.type) {
				case "integer":
					switch(expr.c_type) {
						case "byte":
						case "word":
						case "int":
						case "dword":
						case "long":
							return done("L " + compileRawValue(expr.value, expr.c_type));
					
						default:
							return done("L " + expr.value);
					}
				
				case "real":
					return done("L " + compileRawValue(expr.value, "real"));
				
				case "boolean":
					return done(expr.value ? "SET" : "CLR");
			}
			break;
		
		case "assign":
			push(compileExpr(expr.expr, _));
			switch(expr.type) {
				case "bit":
					if(expr.to.$ == "array-ref") { 
						return done("= " + arrayDereference(push, expr.to, false, _));
					} else {
						return done("= " + fnScopeResolve(expr.to.ref, _).addr);
					}
				
				case "byte":
				case "word":
				case "int":
				case "dword":
				case "long":
				case "real":
					if(expr.to.$ == "array-ref") {
						return done("T " + arrayDereference(push, expr.to, true, _));
					} else {
						return done("T " + fnScopeResolve(expr.to.ref, _).addr);
					}
			}
			break;
		
		case "ref":
			switch(expr.type) {
				case "bit":
					return done("A " + fnScopeResolve(expr.ref, _).addr);
				
				case "byte":
				case "word":
				case "int":
				case "dword":
				case "long":
				case "real":
					return done("L " + fnScopeResolve(expr.ref, _).addr);
					
				default:
					error("incorrect usage of symbol: " + expr.ref, _);
			}
			break;
		
		case "array-ref":
			switch(expr.type) {
				case "bit":
					return done("A " + arrayDereference(push, expr, false, _));
				
				case "byte":
				case "word":
				case "int":
				case "dword":
				case "long":
				case "real":
					return done("L " + arrayDereference(push, expr, false, _));
					
				default:
					error("incorrect usage of symbol: " + expr.ref, _);
			}
			break;
		
		case "op":
			switch(expr.op) {
				case "+":
				case "-":
				case "*":
				case "/":
				case "%":
					var buf;
					var complex = isComplex(expr.b);
					
					push(compileExpr(expr.a, _));
					if(complex) {
						buf = requestIRBuf();
						push("T " + buf);
					}
					
					push(compileExpr(expr.b, _));
					
					if(complex) {
						push("L " + buf);
						push("TAK");
						releaseIRBuf(buf);
					}
					
					if(expr.op == "%") {
						switch(expr.type) {
							case "real":
								push("TRUNC");
								
							case "byte":
							case "word":
							case "int":
							case "dword":
							case "long":
								return done("MOD");
						}
					} else {
						switch(expr.type) {
							case "byte":
							case "word":
							case "int":
								return done(expr.op + "I");
							
							case "dword":
							case "long":
								return done(expr.op + "D");
							
							case "real":
								return done(expr.op + "R");
						}
					}
					break;
				
				case "'r":
				case "'f":
					push(compileExpr(expr.a, _));
					var op = expr.op === "'r" ? "FP" : "FN";
					return done(op + " M " + allocBit());
				
				case "!":
					push(compileExpr(expr.a, _));
					return done("NOT");
				
				case "&&":
				case "||":
				case "^^":
					var op;
					switch(expr.op) {
						case "&&": op = "A("; break;
						case "||": op = "O("; break;
						case "^^": op = "X("; break;
					};
					
					push(op);
					push(compileExpr(expr.a, _));
					push(")");
					push(op);
					push(compileExpr(expr.b, _));
					return done(")");
				
				case "<<":
				case ">>":
				case "<<<":
				case ">>>":
					var buf;
					var complex = isComplex(expr.a);
					
					push(compileExpr(expr.b, _));
					if(complex) {
						buf = requestIRBuf();
						push("T " + buf);
					}
					
					push(compileExpr(expr.a, _));
					
					if(complex) {
						push("L " + buf);
						push("TAK");
						releaseIRBuf(buf);
					}
					
					switch(expr.type) {
						case "byte":
						case "word":
							return done(expr.op === "<<" ? "SLW" : "SRW");
							
						case "dword":
							return done(expr.op === "<<" ? "SLD" : "SRD");
						
						case "int":
							return done(expr.op === "<<" ? "SLW" : "SSI");
							
						case "long":
						case "real":
							if(expr.op.length > 2)
								return done(expr.op === "<<" ? "RLD" : "RRD");
							else
								return done(expr.op === "<<" ? "SLD" : "SSD");
					}
				
				case "&":
				case "|":
				case "^":
					var buf;
					var complex = isComplex(expr.b);
					
					push(compileExpr(expr.a, _));
					if(complex) {
						buf = requestIRBuf();
						push("T " + buf);
					}
					
					push(compileExpr(expr.b, _));
					
					if(complex) {
						push("L " + buf);
						push("TAK");
						releaseIRBuf(buf);
					}
					
					var op;
					switch(expr.op) {
						case "&": op = "A"; break;
						case "|": op = "O"; break;
						case "^": op = "X"; break;
					}
					
					switch(expr.type) {
						case "byte":
						case "word":
						case "int":
							return done(op + "W");
						
						case "dword":
						case "long":
						case "real":
							return done(op + "D");
					}
				
				case "<":
				case "<=":
				case ">":
				case ">=":
				case "==":
				case "!=":
					if(expr.a.type == "bit") {
						switch(expr.op) {
							case "==":
							case "!=":
								push("X(");
								push(compileExpr(expr.a, _));
								push(")");
								push(expr.op == "==" ? "XN(" : "X(");
								push(compileExpr(expr.b, _));
								return done(")");
						}
						break;
					}
				
					var buf;
					var complex = isComplex(expr.b);
					
					push(compileExpr(expr.a, _));
					if(complex) {
						buf = requestIRBuf();
						push("T " + buf);
					}
					
					push(compileExpr(expr.b, _));
					
					if(complex) {
						push("L " + buf);
						push("TAK");
						releaseIRBuf(buf);
					}
					
					var op;
					switch(expr.op) {
						case "<":  op = "<"; break;
						case "<=": op = "<="; break;
						case ">":  op = ">"; break;
						case ">=": op = ">="; break;
						case "==": op = "=="; break;
						case "!=": op = "<>"; break;
					}
					
					switch(expr.a.type) {
						case "byte":
						case "word":
						case "int":
							return done(op + "I");
						
						case "dword":
						case "long":
							return done(op + "D");
						
						case "real":
							return done(op + "R");
					}
			}
			break;
		
		case "cast":
			push(compileExpr(expr.expr, _));
			
			function bool2int(type) {
				var else_label = generateLabel();
				var end_label = generateLabel();
				push("JCN " + else_label);
				push("L " + compileRawValue(1, type));
				push("JU " + end_label);
				push(else_label + ": L " + compileRawValue(0, type));
				push(end_label + ": NOP 0");
			}
			
			switch(expr.type) {
				case "bit":
					push(expr.expr.type == "real" ? "L " + compileRawValue(0, "real") : "L B#16#0");
					switch(expr.expr.type) {
						case "byte":
						case "word":
						case "int":
							return done("<>I");
						
						case "dword":
						case "long":
							return done("<>D");
						
						case "real":
							return done("<>R");
					}
					break;
				
				case "word":
				case "dword":
					switch(expr.expr.type) {
						case "bit":
							bool2int(expr.type);
							return done();
							
						case "byte":
						case "word":
						case "dword":
						case "int":
						case "long":
						case "real":
							// Already in the accumulator
							return done();
					}
					break;
				
				case "byte":
				case "int":
					switch(expr.expr.type) {
						case "bit":
							bool2int(expr.type);
							return done();
							
						case "byte":
						case "word":
						case "int":
						case "dword":
						case "long":
							// Already in the accumulator
							return done();
						
						case "real":
							return done("TRUNC");
					}
					break;
				
				case "long":
					switch(expr.expr.type) {
						case "bit":
							bool2int(expr.type);
							return done();
						
						case "byte":
						case "word":
						case "dword":
							// Already in the accumulator
							return done();
						
						case "real":
							return done("TRUNC");
						
						case "int":
							return done("ITD");
					}
					break;
					
				case "real":
					switch(expr.expr.type) {
						case "bit":
							bool2int(expr.type);
							return done();
						
						case "byte":
						case "word":
						case "int":
							push("ITD");
						
						case "dword":
						case "long":
							return done("DTR");
					}
					break;
			}
			break;
		
		case "call":
			if(expr.fn[0] == "$") {
				builtins[expr.fn][1](push, expr.args, _)
				return done();
			}
		
			var fn = getSymbol(expr.fn);
			
			if(fn.$ !== "function")
				error("calling a non-function symbol: " + expr.fn, _);
			
			if(expr.args.length != fn.entry.args.length)
				error("parameters count mismatch", _);
			
			var args = [];
			var allocated = {};
			
			expr.args.forEach(function(arg, i) {
				var type = fn.entry.args[i].type;
				var ca_name;
				var j = 0;
				do {
					ca_name = "CA$" + type + j++;
				} while(allocated[ca_name]);
				allocated[ca_name] = true;
				
				if(!func_buf.scope[ca_name])
					fnDeclareVariable(type, ca_name, null, false);
					
				push(compileExpr({ $: "assign", type: type, to: { $: "ref", type: type, ref: ca_name }, expr: dynCast(arg, type, _) }));
				args.push(fn.entry.scope[fn.entry.args[i].name].addr.slice(1) + " := " + func_buf.scope[ca_name].addr);
			});
			
			if(fn.type !== "void") {
				var ret_val_name = "RV$" + fn.type;
				if(!func_buf.scope[ret_val_name])
					fnDeclareVariable(fn.type, ret_val_name, null, false);
				args.unshift("RET_VAL := " + func_buf.scope[ret_val_name].addr);
			}
			
			var args_string = "";
			if(args.length) {
				args_string = " (" + args.join(", ") + ")";
			}
			
			push("CALL " + fn.id + args_string)
			
			if(fn.type !== "void")
				push(compileExpr({ $: "ref", type: fn.type, ref: "RV$" + fn.type }));
				
			return done();
        
        case "list":
            return done(expr.code);
	}
	
	error("unable to compile expression:\n" + JSON.stringify(expr, null, 4), _);
}

function isComplex(expr) {
	if(expr.$ === "cast")
		return isComplex(expr.expr);
	
	switch(expr.$) {
		case "value":
		case "ref":
			return false;
		
		default:
			return true;
	}
}

function validateCase(type, value, _) {
	if(value > 255)
		error("switch-case table overflow (limit is 255)", _);
}

function operationType(op, a, b, _) {
	if(a.$ === "value" || b.$ === "value") {
		if(a.$ === "value" && b.$ === "value") {
			switch(a.type) {
				case "boolean": return "bit";
				case "integer": return "long";
				case "real":    return "real";
				default:
					error("Unhandled operand type: " + a.type);
			}
		} else {
			return a.$ === "value" ? b.type : a.type;
		}
	}
	
	if(a.type !== b.type)
		error("operation types mismatch: " + a.type + " " + b.type, _);
	
	return a.type;
}

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* skip comments */
break;
case 3:return 53;
break;
case 4:return 69;
break;
case 5:return 54;
break;
case 6:return 127;
break;
case 7:return 125;
break;
case 8:return 122;
break;
case 9:return 123;
break;
case 10:return 124;
break;
case 11:return 128;
break;
case 12:return 129;
break;
case 13:return 80;
break;
case 14:return 81;
break;
case 15:return 70;
break;
case 16:return 71;
break;
case 17:return 77;
break;
case 18:return 74;
break;
case 19:return 75;
break;
case 20:return 76;
break;
case 21:return 56;
break;
case 22:return 83;
break;
case 23:return 82;
break;
case 24:return 84;
break;
case 25:return 44;
break;
case 26:return 13;
break;
case 27:return 15;
break;
case 28:return 106;
break;
case 29:return 107;
break;
case 30:return 109;
break;
case 31:return 110;
break;
case 32:return 113;
break;
case 33:return 114;
break;
case 34:return 111;
break;
case 35:return 112;
break;
case 36:return 115;
break;
case 37:return 116;
break;
case 38:return 117;
break;
case 39:return 101;
break;
case 40:return 102;
break;
case 41:return 99;
break;
case 42:return 100;
break;
case 43:return 95;
break;
case 44:return 96;
break;
case 45:return 97;
break;
case 46:return 98;
break;
case 47:return 103;
break;
case 48:return 103;
break;
case 49:return 104;
break;
case 50:return 104;
break;
case 51:return 105;
break;
case 52:return 105;
break;
case 53:return 118;
break;
case 54:return 92;
break;
case 55:return 119;
break;
case 56:return 93;
break;
case 57:return 120;
break;
case 58:return 94;
break;
case 59:return 108;
break;
case 60:return 108;
break;
case 61:return 89;
break;
case 62:return 90;
break;
case 63:return 91;
break;
case 64:return 88;
break;
case 65:return 87;
break;
case 66:return 36;
break;
case 67:return 38;
break;
case 68:return 20;
break;
case 69:return 22;
break;
case 70:return 28;
break;
case 71:return 30;
break;
case 72:return 40;
break;
case 73:return 55;
break;
case 74:return 16;
break;
case 75:return 24;
break;
case 76:return 85;
break;
case 77:return 86;
break;
case 78:return '~';
break;
case 79:return 19;
break;
case 80:return 17;
break;
case 81:return 5;
break;
case 82:return 'INVALID';
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:``(.|\n|\r)*?``)/,/^(?:`(.|\n|\r)*?`)/,/^(?:#.*)/,/^(?:"[^"]*")/,/^(?:([0-9][0-9_]*)?\.[0-9_]+\b)/,/^(?:[0-9][0-9_]*\b)/,/^(?:0[xX][0-9A-Fa-f_]+?\b)/,/^(?:0[bB][01_]+?\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:goto\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:static\b)/,/^(?:block\b)/,/^(?:->)/,/^(?::r\b)/,/^(?::f\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:%=)/,/^(?:<<=)/,/^(?:>>=)/,/^(?:<<<)/,/^(?:>>>)/,/^(?:<<)/,/^(?:>>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:and\b)/,/^(?:\|\|)/,/^(?:or\b)/,/^(?:\^\^)/,/^(?:xor\b)/,/^(?:&=)/,/^(?:&)/,/^(?:\|=)/,/^(?:\|)/,/^(?:\^=)/,/^(?:\^)/,/^(?:!)/,/^(?:not\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:=)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:@\s*[IQM]([0-9]+\.[0-7]|[BWD][0-9]+)\b)/,/^(?:[a-zA-Z_$][a-zA-Z_0-9]*\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = stlc;
exports.Parser = stlc.Parser;
exports.parse = function () { return stlc.parse.apply(stlc, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}